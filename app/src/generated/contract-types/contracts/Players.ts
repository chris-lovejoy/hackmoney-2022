/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface PlayersInterface extends utils.Interface {
  functions: {
    "AAVE_VAULT()": FunctionFragment;
    "BACKEND()": FunctionFragment;
    "NFT()": FunctionFragment;
    "NFTPRICE()": FunctionFragment;
    "WORLD()": FunctionFragment;
    "indexStartingPosition()": FunctionFragment;
    "initialize()": FunctionFragment;
    "moveShip(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "players(address)": FunctionFragment;
    "registerProfile(string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAaveVault(address)": FunctionFragment;
    "setBackendAddress(address)": FunctionFragment;
    "setNftAddress(address)": FunctionFragment;
    "setWorldAddress(address)": FunctionFragment;
    "syncSteps(bytes32,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "verifySteps(bytes32,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AAVE_VAULT"
      | "BACKEND"
      | "NFT"
      | "NFTPRICE"
      | "WORLD"
      | "indexStartingPosition"
      | "initialize"
      | "moveShip"
      | "owner"
      | "players"
      | "registerProfile"
      | "renounceOwnership"
      | "setAaveVault"
      | "setBackendAddress"
      | "setNftAddress"
      | "setWorldAddress"
      | "syncSteps"
      | "transferOwnership"
      | "verifySteps"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "AAVE_VAULT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "BACKEND", values?: undefined): string;
  encodeFunctionData(functionFragment: "NFT", values?: undefined): string;
  encodeFunctionData(functionFragment: "NFTPRICE", values?: undefined): string;
  encodeFunctionData(functionFragment: "WORLD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "indexStartingPosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "moveShip",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "players", values: [string]): string;
  encodeFunctionData(
    functionFragment: "registerProfile",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAaveVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBackendAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNftAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setWorldAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "syncSteps",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySteps",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "AAVE_VAULT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "BACKEND", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NFTPRICE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WORLD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "indexStartingPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "moveShip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAaveVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBackendAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNftAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWorldAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "syncSteps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySteps",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PlanetConquer(address,uint256,uint256,uint256)": EventFragment;
    "StepsAdded(uint256,address,uint256)": EventFragment;
    "TreasuryFunded(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlanetConquer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StepsAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryFunded"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PlanetConquerEventObject {
  player: string;
  amount: BigNumber;
  planetType: BigNumber;
  timestamp: BigNumber;
}
export type PlanetConquerEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  PlanetConquerEventObject
>;

export type PlanetConquerEventFilter = TypedEventFilter<PlanetConquerEvent>;

export interface StepsAddedEventObject {
  stepsTaken: BigNumber;
  player: string;
  timestamp: BigNumber;
}
export type StepsAddedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  StepsAddedEventObject
>;

export type StepsAddedEventFilter = TypedEventFilter<StepsAddedEvent>;

export interface TreasuryFundedEventObject {
  amountFunded: BigNumber;
}
export type TreasuryFundedEvent = TypedEvent<
  [BigNumber],
  TreasuryFundedEventObject
>;

export type TreasuryFundedEventFilter = TypedEventFilter<TreasuryFundedEvent>;

export interface Players extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PlayersInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AAVE_VAULT(overrides?: CallOverrides): Promise<[string]>;

    BACKEND(overrides?: CallOverrides): Promise<[string]>;

    NFT(overrides?: CallOverrides): Promise<[string]>;

    NFTPRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    WORLD(overrides?: CallOverrides): Promise<[string]>;

    indexStartingPosition(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    moveShip(
      x: BigNumberish,
      y: BigNumberish,
      _planetId: BigNumberish,
      _shipId: BigNumberish,
      _worldId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    players(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        playerId: BigNumber;
        timeJoined: BigNumber;
        lastQueried: BigNumber;
        stepsAvailable: BigNumber;
        totalStepsTaken: BigNumber;
        amountEarned: BigNumber;
      }
    >;

    registerProfile(
      _tokenURI: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAaveVault(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBackendAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNftAddress(
      _nftContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWorldAddress(
      _worldAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    syncSteps(
      _hashedMessageBackend: BytesLike,
      _steps: BigNumberish,
      _lastQueried: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifySteps(
      _hashedMessageBackend: BytesLike,
      _message: BigNumberish,
      _lastQueried: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  AAVE_VAULT(overrides?: CallOverrides): Promise<string>;

  BACKEND(overrides?: CallOverrides): Promise<string>;

  NFT(overrides?: CallOverrides): Promise<string>;

  NFTPRICE(overrides?: CallOverrides): Promise<BigNumber>;

  WORLD(overrides?: CallOverrides): Promise<string>;

  indexStartingPosition(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  moveShip(
    x: BigNumberish,
    y: BigNumberish,
    _planetId: BigNumberish,
    _shipId: BigNumberish,
    _worldId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  players(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      playerId: BigNumber;
      timeJoined: BigNumber;
      lastQueried: BigNumber;
      stepsAvailable: BigNumber;
      totalStepsTaken: BigNumber;
      amountEarned: BigNumber;
    }
  >;

  registerProfile(
    _tokenURI: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAaveVault(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBackendAddress(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNftAddress(
    _nftContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWorldAddress(
    _worldAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  syncSteps(
    _hashedMessageBackend: BytesLike,
    _steps: BigNumberish,
    _lastQueried: BigNumberish,
    _v: BigNumberish,
    _r: BytesLike,
    _s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifySteps(
    _hashedMessageBackend: BytesLike,
    _message: BigNumberish,
    _lastQueried: BigNumberish,
    _v: BigNumberish,
    _r: BytesLike,
    _s: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    AAVE_VAULT(overrides?: CallOverrides): Promise<string>;

    BACKEND(overrides?: CallOverrides): Promise<string>;

    NFT(overrides?: CallOverrides): Promise<string>;

    NFTPRICE(overrides?: CallOverrides): Promise<BigNumber>;

    WORLD(overrides?: CallOverrides): Promise<string>;

    indexStartingPosition(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: CallOverrides): Promise<void>;

    moveShip(
      x: BigNumberish,
      y: BigNumberish,
      _planetId: BigNumberish,
      _shipId: BigNumberish,
      _worldId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    players(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        playerId: BigNumber;
        timeJoined: BigNumber;
        lastQueried: BigNumber;
        stepsAvailable: BigNumber;
        totalStepsTaken: BigNumber;
        amountEarned: BigNumber;
      }
    >;

    registerProfile(
      _tokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAaveVault(_address: string, overrides?: CallOverrides): Promise<void>;

    setBackendAddress(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setNftAddress(
      _nftContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setWorldAddress(
      _worldAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    syncSteps(
      _hashedMessageBackend: BytesLike,
      _steps: BigNumberish,
      _lastQueried: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifySteps(
      _hashedMessageBackend: BytesLike,
      _message: BigNumberish,
      _lastQueried: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PlanetConquer(address,uint256,uint256,uint256)"(
      player?: string | null,
      amount?: null,
      planetType?: null,
      timestamp?: null
    ): PlanetConquerEventFilter;
    PlanetConquer(
      player?: string | null,
      amount?: null,
      planetType?: null,
      timestamp?: null
    ): PlanetConquerEventFilter;

    "StepsAdded(uint256,address,uint256)"(
      stepsTaken?: null,
      player?: null,
      timestamp?: null
    ): StepsAddedEventFilter;
    StepsAdded(
      stepsTaken?: null,
      player?: null,
      timestamp?: null
    ): StepsAddedEventFilter;

    "TreasuryFunded(uint256)"(amountFunded?: null): TreasuryFundedEventFilter;
    TreasuryFunded(amountFunded?: null): TreasuryFundedEventFilter;
  };

  estimateGas: {
    AAVE_VAULT(overrides?: CallOverrides): Promise<BigNumber>;

    BACKEND(overrides?: CallOverrides): Promise<BigNumber>;

    NFT(overrides?: CallOverrides): Promise<BigNumber>;

    NFTPRICE(overrides?: CallOverrides): Promise<BigNumber>;

    WORLD(overrides?: CallOverrides): Promise<BigNumber>;

    indexStartingPosition(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    moveShip(
      x: BigNumberish,
      y: BigNumberish,
      _planetId: BigNumberish,
      _shipId: BigNumberish,
      _worldId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    players(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    registerProfile(
      _tokenURI: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAaveVault(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBackendAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNftAddress(
      _nftContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWorldAddress(
      _worldAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    syncSteps(
      _hashedMessageBackend: BytesLike,
      _steps: BigNumberish,
      _lastQueried: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifySteps(
      _hashedMessageBackend: BytesLike,
      _message: BigNumberish,
      _lastQueried: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AAVE_VAULT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BACKEND(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NFTPRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WORLD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    indexStartingPosition(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    moveShip(
      x: BigNumberish,
      y: BigNumberish,
      _planetId: BigNumberish,
      _shipId: BigNumberish,
      _worldId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    players(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerProfile(
      _tokenURI: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAaveVault(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBackendAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNftAddress(
      _nftContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWorldAddress(
      _worldAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    syncSteps(
      _hashedMessageBackend: BytesLike,
      _steps: BigNumberish,
      _lastQueried: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifySteps(
      _hashedMessageBackend: BytesLike,
      _message: BigNumberish,
      _lastQueried: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
