/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  PlanetFactory,
  PlanetFactoryInterface,
} from "../../contracts/PlanetFactory";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_planetID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_worldMapIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_xCoord",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_yCoord",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_planetType",
        type: "uint256",
      },
    ],
    name: "createPlanet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "existingPlanets",
    outputs: [
      {
        internalType: "uint256",
        name: "planetID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "worldMapIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "xCoord",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "yCoord",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "planetType",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_planetId",
        type: "uint256",
      },
    ],
    name: "getPlanet",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "planetID",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "worldMapIndex",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "xCoord",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "yCoord",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "planetType",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
        ],
        internalType: "struct SharedStructs.Planet",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "planetTypes",
    outputs: [
      {
        internalType: "uint256",
        name: "radius",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "yield_source",
        type: "string",
      },
      {
        internalType: "string",
        name: "image_link",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610019610119565b6040518060600160405280600281526020016040518060400160405280600581526020017f796561726e00000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280601a81526020017f68747470733a2f2f544f444f2d6164642d495046532d6c696e6b000000000000815250815250905060008190806001815401808255809150506001900390600052602060002090600302016000909190919091506000820151816000015560208201518160010190805190602001906100f392919061013a565b50604082015181600201908051906020019061011092919061013a565b5050505061023e565b60405180606001604052806000815260200160608152602001606081525090565b828054610146906101dd565b90600052602060002090601f01602090048101928261016857600085556101af565b82601f1061018157805160ff19168380011785556101af565b828001600101855582156101af579182015b828111156101ae578251825591602001919060010190610193565b5b5090506101bc91906101c0565b5090565b5b808211156101d95760008160009055506001016101c1565b5090565b600060028204905060018216806101f557607f821691505b602082108114156102095761020861020f565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b61071c8061024d6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063040af1ba1461005157806334efcb8e1461006d578063cf4530b91461009d578063e08c264e146100d2575b600080fd5b61006b600480360381019061006691906103fa565b610104565b005b610087600480360381019061008291906103d1565b610197565b6040516100949190610543565b60405180910390f35b6100b760048036038101906100b291906103d1565b610200565b6040516100c9969594939291906105a3565b60405180910390f35b6100ec60048036038101906100e791906103d1565b61023c565b6040516100fb9392919061055e565b60405180910390f35b61010c610386565b6040518060c00160405280878152602001868152602001858152602001848152602001838152602001600081525090508060016000888152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050155905050505050505050565b61019f610386565b600160008381526020019081526020016000206040518060c001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815250509050919050565b60016020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154908060050154905086565b6000818154811061024c57600080fd5b90600052602060002090600302016000915090508060000154908060010180546102759061065d565b80601f01602080910402602001604051908101604052809291908181526020018280546102a19061065d565b80156102ee5780601f106102c3576101008083540402835291602001916102ee565b820191906000526020600020905b8154815290600101906020018083116102d157829003601f168201915b5050505050908060020180546103039061065d565b80601f016020809104026020016040519081016040528092919081815260200182805461032f9061065d565b801561037c5780601f106103515761010080835404028352916020019161037c565b820191906000526020600020905b81548152906001019060200180831161035f57829003601f168201915b5050505050905083565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000813590506103cb816106cf565b92915050565b6000602082840312156103e357600080fd5b60006103f1848285016103bc565b91505092915050565b600080600080600060a0868803121561041257600080fd5b6000610420888289016103bc565b9550506020610431888289016103bc565b9450506040610442888289016103bc565b9350506060610453888289016103bc565b9250506080610464888289016103bc565b9150509295509295909350565b600061047c82610604565b610486818561060f565b935061049681856020860161062a565b61049f816106be565b840191505092915050565b60c0820160008201516104c06000850182610525565b5060208201516104d36020850182610525565b5060408201516104e66040850182610525565b5060608201516104f96060850182610525565b50608082015161050c6080850182610525565b5060a082015161051f60a0850182610525565b50505050565b61052e81610620565b82525050565b61053d81610620565b82525050565b600060c08201905061055860008301846104aa565b92915050565b60006060820190506105736000830186610534565b81810360208301526105858185610471565b905081810360408301526105998184610471565b9050949350505050565b600060c0820190506105b86000830189610534565b6105c56020830188610534565b6105d26040830187610534565b6105df6060830186610534565b6105ec6080830185610534565b6105f960a0830184610534565b979650505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050919050565b60005b8381101561064857808201518184015260208101905061062d565b83811115610657576000848401525b50505050565b6000600282049050600182168061067557607f821691505b602082108114156106895761068861068f565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b6106d881610620565b81146106e357600080fd5b5056fea26469706673582212200a965370a0f5e674ed729f24c9039525b56c8596cbaf2ced0d2121aea011f61c64736f6c63430008040033";

type PlanetFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PlanetFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PlanetFactory__factory extends ContractFactory {
  constructor(...args: PlanetFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PlanetFactory> {
    return super.deploy(overrides || {}) as Promise<PlanetFactory>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PlanetFactory {
    return super.attach(address) as PlanetFactory;
  }
  override connect(signer: Signer): PlanetFactory__factory {
    return super.connect(signer) as PlanetFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PlanetFactoryInterface {
    return new utils.Interface(_abi) as PlanetFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PlanetFactory {
    return new Contract(address, _abi, signerOrProvider) as PlanetFactory;
  }
}
