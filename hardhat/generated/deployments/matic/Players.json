{
  "address": "0x46f162eFe0364a93Cb3B644989e095f099AcBe75",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "planetType",
          "type": "uint256"
        }
      ],
      "name": "PlanetConquer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stepsTaken",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "StepsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountFunded",
          "type": "uint256"
        }
      ],
      "name": "TreasuryFunded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NFTPRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "determineStartingPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "indexStartingPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_planetId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_shipId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_worldId",
          "type": "uint256"
        }
      ],
      "name": "moveShip",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "playerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeJoined",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastQueried",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stepsAvailable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStepsTaken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountEarned",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "registerProfile",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setAaveVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setBackendAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftContractAddress",
          "type": "address"
        }
      ],
      "name": "setNftAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_worldAddress",
          "type": "address"
        }
      ],
      "name": "setWorldAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hashedMessageBackend",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_steps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastQueried",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "syncSteps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hashedMessageBackend",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_message",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastQueried",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "verifySteps",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf0c3470a5e6c3fbd555f14c6c85808067285503e7600c40e5254e0e3cd573fda",
  "receipt": {
    "to": null,
    "from": "0x8d3b5Bd6CeB7217c537411D976DB557f80E64487",
    "contractAddress": "0x46f162eFe0364a93Cb3B644989e095f099AcBe75",
    "transactionIndex": 2,
    "gasUsed": "2080990",
    "logsBloom": "0x
    "blockHash": "0xb11187be923e0c165022b05480624912327be27133e3a28622828a41b1fc44b7",
    "transactionHash": "0xf0c3470a5e6c3fbd555f14c6c85808067285503e7600c40e5254e0e3cd573fda",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 26847577,
        "transactionHash": "0xf0c3470a5e6c3fbd555f14c6c85808067285503e7600c40e5254e0e3cd573fda",
        "address": "0x46f162eFe0364a93Cb3B644989e095f099AcBe75",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008d3b5bd6ceb7217c537411d976db557f80e64487"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xb11187be923e0c165022b05480624912327be27133e3a28622828a41b1fc44b7"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 26847577,
        "transactionHash": "0xf0c3470a5e6c3fbd555f14c6c85808067285503e7600c40e5254e0e3cd573fda",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008d3b5bd6ceb7217c537411d976db557f80e64487",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000177405238ab126800000000000000000000000000000000000000000000000013be09319c1425480000000000000000000000000000000000000000000004e2ee13e2e9f86686dc0000000000000000000000000000000000000000000000001246c8df636912e00000000000000000000000000000000000000000000004e2ef8b233c31119944",
        "logIndex": 5,
        "blockHash": "0xb11187be923e0c165022b05480624912327be27133e3a28622828a41b1fc44b7"
      }
    ],
    "blockNumber": 26847577,
    "cumulativeGasUsed": "2157421",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "cf68662ea65e84f6bf7246b6b139d287",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"planetType\",\"type\":\"uint256\"}],\"name\":\"PlanetConquer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stepsTaken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StepsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountFunded\",\"type\":\"uint256\"}],\"name\":\"TreasuryFunded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NFTPRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"determineStartingPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"indexStartingPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_planetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shipId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_worldId\",\"type\":\"uint256\"}],\"name\":\"moveShip\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeJoined\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastQueried\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stepsAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStepsTaken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountEarned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"registerProfile\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAaveVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setBackendAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"}],\"name\":\"setNftAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_worldAddress\",\"type\":\"address\"}],\"name\":\"setWorldAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hashedMessageBackend\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_steps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastQueried\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"syncSteps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hashedMessageBackend\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_message\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastQueried\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"verifySteps\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"moveShip(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Move the ship to a new position {_planetId} the planet you want to reach {_shipId} the ship you are moving\"},\"registerProfile(string)\":{\"notice\":\"Creates the user profile of the user and mints a starship nft and forwards $$ to the treasury\"},\"setAaveVault(address)\":{\"notice\":\"We set the Worldcontract Contract, this can also be done in the constructor\"},\"setBackendAddress(address)\":{\"notice\":\"The address of our web2 backend. Messages from the backend which are verified in this contract\"},\"setNftAddress(address)\":{\"notice\":\"We set the Nft Contract, this can also be done in the constructor\"},\"setWorldAddress(address)\":{\"notice\":\"We set the Worldcontract Contract, this can also be done in the constructor\"},\"syncSteps(bytes32,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Sync the steps for the user\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Players.sol\":\"Players\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/Players.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IPlanet.sol\\\";\\nimport \\\"./interfaces/IWorld.sol\\\";\\nimport \\\"./interfaces/IHashVault.sol\\\";\\n\\ncontract Players is Ownable {\\n    using Counters for Counters.Counter;\\n\\n    uint256 constant public NFTPRICE = 0.01 ether;\\n\\n    struct PersonProfile {\\n            uint256 playerId;\\n            uint256 timeJoined;\\n            uint256 lastQueried;\\n            uint256 stepsAvailable;\\n            uint256 totalStepsTaken;\\n            uint256 amountEarned;\\n    }\\n\\n    Counters.Counter indexPlayerIds;\\n    Counters.Counter public indexStartingPosition;\\n    address backendAddress;\\n\\n    mapping (address => PersonProfile) public players;\\n\\n    IPlanet nftContract;\\n    IWorld worldContract;\\n    IHashVault aaveVaultContract;\\n\\n    event TreasuryFunded(uint amountFunded);\\n\\n    event StepsAdded(uint stepsTaken, address player, uint timestamp);\\n\\n    event PlanetConquer(address player, uint amount, uint planetType); // TODO: add planetId\\n\\n\\n    constructor () {\\n    }\\n\\n    /**\\n        The address of our web2 backend.\\n        Messages from the backend which are verified in this contract\\n     */\\n    function setBackendAddress(address _address) public onlyOwner {\\n        backendAddress = _address;\\n    }\\n\\n    /**\\n        We set the Nft Contract, this can also be done in the constructor\\n     */\\n    function setNftAddress(address _nftContractAddress) public onlyOwner {\\n        nftContract = IPlanet(_nftContractAddress);\\n    }\\n\\n    /**\\n        We set the Worldcontract Contract, this can also be done in the constructor\\n     */\\n    function setWorldAddress(address _worldAddress) public onlyOwner {\\n        worldContract = IWorld(_worldAddress);\\n    }\\n\\n    /**\\n        We set the Worldcontract Contract, this can also be done in the constructor\\n     */\\n    function setAaveVault(address _address) public onlyOwner {\\n        aaveVaultContract = IHashVault(_address);\\n    }\\n\\n    /**\\n        Creates the user profile of the user and mints a starship nft\\n        and forwards $$ to the treasury\\n     */\\n    function registerProfile(string memory _tokenURI) public payable\\n     {\\n        _createProfile();\\n\\n        require(msg.value == NFTPRICE, \\\"Not enought/too much ether sent\\\");\\n\\n        // put coins to work in vault\\n        aaveVaultContract.deposit{value: msg.value}();\\n\\n        // mint ship\\n        uint256 shipId = nftContract.mint(msg.sender, _tokenURI);\\n        (uint startingX, uint startingY) = determineStartingPosition();\\n        nftContract.setLocation(shipId, msg.sender, startingX, startingY);\\n    }\\n\\n    function _createProfile() private {\\n        PersonProfile storage player = players[msg.sender];\\n        require(player.playerId == 0, \\\"you already signed up\\\");\\n        indexPlayerIds.increment();\\n        player.playerId = indexPlayerIds.current();\\n        player.timeJoined = block.timestamp;\\n        // give the user 12 hour window, so that he does not sign up with zero steps\\n        player.lastQueried = block.timestamp - (60*60*12);\\n        player.stepsAvailable = 0;\\n        player.totalStepsTaken = 0;\\n        player.amountEarned = 0;\\n    }\\n\\n    /**\\n        Sync the steps for the user\\n    */\\n    function syncSteps(\\n        bytes32 _hashedMessageBackend,\\n        uint256 _steps,\\n        uint256 _lastQueried,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) public {\\n        // verify\\n        PersonProfile storage player = players[msg.sender];\\n        require(player.playerId != 0, \\\"you need to be registered\\\");\\n\\n        require(_lastQueried == player.lastQueried, \\\"last queried does not match\\\");\\n        verifySteps(_hashedMessageBackend, _steps, _lastQueried, _v, _r, _s);\\n\\n        // write\\n        player.totalStepsTaken += _steps;\\n        player.stepsAvailable += _steps;\\n        player.lastQueried = block.timestamp;\\n        emit StepsAdded(_steps, msg.sender, block.timestamp);\\n    }\\n\\n    function verifySteps(\\n        bytes32 _hashedMessageBackend,\\n        uint256 _message,\\n        uint256 _lastQueried,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) public view {\\n\\n        bytes32 hashedMessageSol = keccak256(abi.encode(_message, _lastQueried));\\n        require(hashedMessageSol == _hashedMessageBackend, \\\"payload was modified\\\");\\n\\n        bytes memory prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\n        bytes32 prefixedHashMessage = keccak256(abi.encodePacked(prefix, _hashedMessageBackend));\\n        address signer = ecrecover(prefixedHashMessage, _v, _r, _s);\\n\\n        require(signer == address(backendAddress), \\\"wrong signer\\\");\\n    }\\n\\n    /**\\n        Move the ship to a new position\\n        {_planetId} the planet you want to reach\\n        {_shipId} the ship you are moving\\n     */\\n    function moveShip(uint x, uint y, uint _planetId, uint _shipId, uint _worldId) public payable {\\n\\n        // current location of the ship\\n        (uint xCoordShip, uint yCoordShip) = nftContract.getLocation(_shipId);\\n\\n        // calculate distance moved\\n        uint travelX = get_abs_diff(xCoordShip, x);\\n        uint travelY = get_abs_diff(yCoordShip, y);\\n        uint travelDistance = uint(sqrt((travelX * travelX) + (travelY * travelY)));\\n\\n        // check enough steps available\\n        require(players[msg.sender].stepsAvailable > travelDistance * 10, \\\"Not enough steps available to move there\\\");\\n\\n        // update steps of user\\n        players[msg.sender].stepsAvailable -= travelDistance * 10;\\n\\n        // update ship position\\n        nftContract.setLocation(_shipId, msg.sender, x, y);\\n\\n        // check if we landed on a planet\\n        SharedStructs.Planet memory planet = worldContract.getPlanet(_planetId);\\n\\n        if (x == planet.xCoord && y == planet.yCoord) {\\n            _payout(planet.planetType);\\n        }\\n    }\\n\\n    function _payout(uint planetType) internal {\\n        // route to vaults\\n        if (planetType == 1) {\\n            uint yield = aaveVaultContract.yield();\\n\\n            if (yield > 0 && yield > 0.0000002 ether) { // did run into issues with the amount is too low\\n                aaveVaultContract.withdraw(msg.sender);\\n                players[msg.sender].amountEarned += yield;\\n                emit PlanetConquer(msg.sender, yield, planetType);\\n                return;\\n            }\\n        }\\n        emit PlanetConquer(msg.sender, 0, planetType);\\n    }\\n\\n    function get_abs_diff(uint val1, uint val2) private pure returns (uint) {\\n        return val1 > val2 ? val1 - val2 : val2 - val1;\\n    }\\n\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    function determineStartingPosition() public returns(uint x, uint y) {\\n\\n        indexStartingPosition.increment();\\n        uint positionIndex = indexStartingPosition.current();\\n\\n        uint startingX = positionIndex * 42;\\n        uint startingY = 16;\\n\\n        if (positionIndex == 46) {\\n            indexStartingPosition.reset();\\n        }\\n\\n        return (startingX, startingY);\\n    }\\n}\",\"keccak256\":\"0x688b1537442d5af9598358a654e3caab24091b719747f0d37a53d4e34908f79b\",\"license\":\"Unlicense\"},\"contracts/interfaces/IHashVault.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IHashVault {\\n    function deposit() external payable;\\n    function withdraw(address _receiver) external;\\n    function yield() external view returns(uint);\\n}\",\"keccak256\":\"0x96087da2739f3ed4ae54113bab0c8cab7c752a02c3ae7bcb0081df9b86687431\",\"license\":\"Unlicense\"},\"contracts/interfaces/IPlanet.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IPlanet {\\n    /**\\n      gets the location of the ship\\n    */\\n    function getLocation(\\n        uint256 _tokenId\\n    ) external returns (uint x, uint y);\\n\\n    /**\\n      sets the location of the ship\\n    */\\n    function setLocation(\\n        uint256 _tokenId,\\n        address _ownerAddress,\\n        uint x,\\n        uint y\\n    ) external;\\n\\n    /**\\n      mints a new nft ship\\n     */\\n    function mint(address player, string memory _tokenURI) external returns (uint256);\\n}\",\"keccak256\":\"0x9ed0ac4b0a3ff53ea37ca9550ed68f57164cbdc4b955328d6bb10c8dce07231d\",\"license\":\"Unlicense\"},\"contracts/interfaces/IWorld.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../structs/shared.sol\\\";\\n\\ninterface IWorld {\\n\\n    /**\\n      gets a planet\\n    */\\n    function getPlanet(uint _planetId) external view returns (SharedStructs.Planet memory);\\n}\",\"keccak256\":\"0x52205885fb2ff4e90bc59da1fa66202da179f1b9fbd7816b61ee0a738e4537c4\",\"license\":\"Unlicense\"},\"contracts/structs/shared.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary SharedStructs {\\n        // Define planet information\\n    struct Planet {\\n        uint planetID; // an ID that is unique across all world maps\\n        uint worldMapIndex; // which world map does this planet belong to\\n        uint xCoord; // x-axis coordinate in respective world map\\n        uint yCoord; // y-axis coordinate in respective world map\\n        uint planetType;\\n        uint balance; // The total value of tokens inside the planet\\n    }\\n}\",\"keccak256\":\"0xba5ad34f009c3b308f299dd2dc1ebeb55db9bd50af94a1831fef596997552809\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612453806200010e6000396000f3fe6080604052600436106100e85760003560e01c80637912680d1161008a578063c04d0e5011610059578063c04d0e5014610297578063e2eb41ff146102c3578063e839665c14610305578063f2fde38b14610321576100e8565b80637912680d146101ef5780638da5cb5b14610218578063b93d28ee14610243578063ba1697161461026e576100e8565b8063240bcbfa116100c6578063240bcbfa146101685780633b72498a146101915780633fc90920146101bc578063715018a6146101d8576100e8565b80630b102d1a146100ed5780631815ce7d146101165780631822b8471461013f575b600080fd5b3480156100f957600080fd5b50610114600480360381019061010f9190611781565b61034a565b005b34801561012257600080fd5b5061013d60048036038101906101389190611781565b61040a565b005b34801561014b57600080fd5b50610166600480360381019061016191906117aa565b6104ca565b005b34801561017457600080fd5b5061018f600480360381019061018a91906117aa565b61068f565b005b34801561019d57600080fd5b506101a66107f1565b6040516101b39190611dc6565b60405180910390f35b6101d660048036038101906101d19190611833565b6107fd565b005b3480156101e457600080fd5b506101ed610a2c565b005b3480156101fb57600080fd5b5061021660048036038101906102119190611781565b610ab4565b005b34801561022457600080fd5b5061022d610b74565b60405161023a9190611ba8565b60405180910390f35b34801561024f57600080fd5b50610258610b9d565b6040516102659190611dc6565b60405180910390f35b34801561027a57600080fd5b5061029560048036038101906102909190611781565b610ba8565b005b3480156102a357600080fd5b506102ac610c68565b6040516102ba929190611e5d565b60405180910390f35b3480156102cf57600080fd5b506102ea60048036038101906102e59190611781565b610cbb565b6040516102fc96959493929190611e86565b60405180910390f35b61031f600480360381019061031a9190611902565b610cf7565b005b34801561032d57600080fd5b5061034860048036038101906103439190611781565b611061565b005b610352611159565b73ffffffffffffffffffffffffffffffffffffffff16610370610b74565b73ffffffffffffffffffffffffffffffffffffffff16146103c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103bd90611d86565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610412611159565b73ffffffffffffffffffffffffffffffffffffffff16610430610b74565b73ffffffffffffffffffffffffffffffffffffffff1614610486576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d90611d86565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600085856040516020016104df929190611e5d565b604051602081830303815290604052805190602001209050868114610539576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053090611ce6565b60405180910390fd5b60006040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250905060008189604051602001610588929190611b80565b6040516020818303038152906040528051906020012090506000600182888888604051600081526020016040526040516105c59493929190611c61565b6020604051602081039080840390855afa1580156105e7573d6000803e3d6000fd5b505050602060405103519050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610683576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067a90611ca6565b60405180910390fd5b50505050505050505050565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000154141561071a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071190611da6565b60405180910390fd5b80600201548514610760576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075790611d66565b60405180910390fd5b61076e8787878787876104ca565b858160040160008282546107829190611f6f565b925050819055508581600301600082825461079d9190611f6f565b925050819055504281600201819055507fea53fca5456139f39e787af7250a4c0571c46facc363f3083ec3fa7a0d65888e8633426040516107e093929190611de1565b60405180910390a150505050505050565b60028060000154905081565b610805611161565b662386f26fc10000341461084e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084590611d26565b60405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156108b857600080fd5b505af11580156108cc573d6000803e3d6000fd5b50505050506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0def52133846040518363ffffffff1660e01b8152600401610930929190611bfa565b602060405180830381600087803b15801561094a57600080fd5b505af115801561095e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610982919061189d565b905060008061098f610c68565b91509150600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f4881477843385856040518563ffffffff1660e01b81526004016109f49493929190611e18565b600060405180830381600087803b158015610a0e57600080fd5b505af1158015610a22573d6000803e3d6000fd5b5050505050505050565b610a34611159565b73ffffffffffffffffffffffffffffffffffffffff16610a52610b74565b73ffffffffffffffffffffffffffffffffffffffff1614610aa8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9f90611d86565b60405180910390fd5b610ab26000611247565b565b610abc611159565b73ffffffffffffffffffffffffffffffffffffffff16610ada610b74565b73ffffffffffffffffffffffffffffffffffffffff1614610b30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2790611d86565b60405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b662386f26fc1000081565b610bb0611159565b73ffffffffffffffffffffffffffffffffffffffff16610bce610b74565b73ffffffffffffffffffffffffffffffffffffffff1614610c24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1b90611d86565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080610c75600261130b565b6000610c816002611321565b90506000602a82610c929190611ff6565b9050600060109050602e831415610cae57610cad600261132f565b5b8181945094505050509091565b60046020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154908060050154905086565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f7b1393856040518263ffffffff1660e01b8152600401610d559190611dc6565b6040805180830381600087803b158015610d6e57600080fd5b505af1158015610d82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da691906118c6565b915091506000610db6838961133c565b90506000610dc4838961133c565b90506000610df28283610dd79190611ff6565b8485610de39190611ff6565b610ded9190611f6f565b61136b565b9050600a81610e019190611ff6565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015411610e84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7b90611d06565b60405180910390fd5b600a81610e919190611ff6565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000828254610ee29190612050565b92505081905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f488147788338d8d6040518563ffffffff1660e01b8152600401610f4a9493929190611e18565b600060405180830381600087803b158015610f6457600080fd5b505af1158015610f78573d6000803e3d6000fd5b505050506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334efcb8e8a6040518263ffffffff1660e01b8152600401610fd99190611dc6565b60c06040518083038186803b158015610ff157600080fd5b505afa158015611005573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110299190611874565b905080604001518b148015611041575080606001518a145b156110545761105381608001516113e5565b5b5050505050505050505050565b611069611159565b73ffffffffffffffffffffffffffffffffffffffff16611087610b74565b73ffffffffffffffffffffffffffffffffffffffff16146110dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d490611d86565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561114d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114490611cc6565b60405180910390fd5b61115681611247565b50565b600033905090565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000154146111eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e290611d46565b60405180910390fd5b6111f5600161130b565b6111ff6001611321565b816000018190555042816001018190555061a8c04261121e9190612050565b816002018190555060008160030181905550600081600401819055506000816005018190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6001816000016000828254019250508190555050565b600081600001549050919050565b6000816000018190555050565b60008183116113565782826113519190612050565b611363565b81836113629190612050565b5b905092915050565b600060038211156113d2578190506000600160028461138a9190611fc5565b6113949190611f6f565b90505b818110156113cc5780915060028182856113b19190611fc5565b6113bb9190611f6f565b6113c59190611fc5565b9050611397565b506113e0565b600082146113df57600190505b5b919050565b60018114156115d4576000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663285939846040518163ffffffff1660e01b815260040160206040518083038186803b15801561145857600080fd5b505afa15801561146c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611490919061189d565b90506000811180156114a65750642e90edd00081115b156115d257600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351cff8d9336040518263ffffffff1660e01b81526004016115069190611ba8565b600060405180830381600087803b15801561152057600080fd5b505af1158015611534573d6000803e3d6000fd5b5050505080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501600082825461158a9190611f6f565b925050819055507f59ef31821b015e51b3e5bf608636da7db2b7cde28283955437e586ebc48fc5c83382846040516115c493929190611c2a565b60405180910390a150611611565b505b7f59ef31821b015e51b3e5bf608636da7db2b7cde28283955437e586ebc48fc5c83360008360405161160893929190611bc3565b60405180910390a15b50565b600061162761162284611f0c565b611ee7565b90508281526020810184848401111561163f57600080fd5b61164a8482856120e9565b509392505050565b600081359050611661816123c1565b92915050565b600081359050611676816123d8565b92915050565b600082601f83011261168d57600080fd5b813561169d848260208601611614565b91505092915050565b600060c082840312156116b857600080fd5b6116c260c0611ee7565b905060006116d284828501611757565b60008301525060206116e684828501611757565b60208301525060406116fa84828501611757565b604083015250606061170e84828501611757565b606083015250608061172284828501611757565b60808301525060a061173684828501611757565b60a08301525092915050565b600081359050611751816123ef565b92915050565b600081519050611766816123ef565b92915050565b60008135905061177b81612406565b92915050565b60006020828403121561179357600080fd5b60006117a184828501611652565b91505092915050565b60008060008060008060c087890312156117c357600080fd5b60006117d189828a01611667565b96505060206117e289828a01611742565b95505060406117f389828a01611742565b945050606061180489828a0161176c565b935050608061181589828a01611667565b92505060a061182689828a01611667565b9150509295509295509295565b60006020828403121561184557600080fd5b600082013567ffffffffffffffff81111561185f57600080fd5b61186b8482850161167c565b91505092915050565b600060c0828403121561188657600080fd5b6000611894848285016116a6565b91505092915050565b6000602082840312156118af57600080fd5b60006118bd84828501611757565b91505092915050565b600080604083850312156118d957600080fd5b60006118e785828601611757565b92505060206118f885828601611757565b9150509250929050565b600080600080600060a0868803121561191a57600080fd5b600061192888828901611742565b955050602061193988828901611742565b945050604061194a88828901611742565b935050606061195b88828901611742565b925050608061196c88828901611742565b9150509295509295909350565b61198281612084565b82525050565b61199181612096565b82525050565b6119a86119a382612096565b61215c565b82525050565b60006119b982611f3d565b6119c38185611f53565b93506119d38185602086016120f8565b80840191505092915050565b6119e8816120d7565b82525050565b60006119f982611f48565b611a038185611f5e565b9350611a138185602086016120f8565b611a1c816121f3565b840191505092915050565b6000611a34600c83611f5e565b9150611a3f82612204565b602082019050919050565b6000611a57602683611f5e565b9150611a628261222d565b604082019050919050565b6000611a7a601483611f5e565b9150611a858261227c565b602082019050919050565b6000611a9d602883611f5e565b9150611aa8826122a5565b604082019050919050565b6000611ac0601f83611f5e565b9150611acb826122f4565b602082019050919050565b6000611ae3601583611f5e565b9150611aee8261231d565b602082019050919050565b6000611b06601b83611f5e565b9150611b1182612346565b602082019050919050565b6000611b29602083611f5e565b9150611b348261236f565b602082019050919050565b6000611b4c601983611f5e565b9150611b5782612398565b602082019050919050565b611b6b816120c0565b82525050565b611b7a816120ca565b82525050565b6000611b8c82856119ae565b9150611b988284611997565b6020820191508190509392505050565b6000602082019050611bbd6000830184611979565b92915050565b6000606082019050611bd86000830186611979565b611be560208301856119df565b611bf26040830184611b62565b949350505050565b6000604082019050611c0f6000830185611979565b8181036020830152611c2181846119ee565b90509392505050565b6000606082019050611c3f6000830186611979565b611c4c6020830185611b62565b611c596040830184611b62565b949350505050565b6000608082019050611c766000830187611988565b611c836020830186611b71565b611c906040830185611988565b611c9d6060830184611988565b95945050505050565b60006020820190508181036000830152611cbf81611a27565b9050919050565b60006020820190508181036000830152611cdf81611a4a565b9050919050565b60006020820190508181036000830152611cff81611a6d565b9050919050565b60006020820190508181036000830152611d1f81611a90565b9050919050565b60006020820190508181036000830152611d3f81611ab3565b9050919050565b60006020820190508181036000830152611d5f81611ad6565b9050919050565b60006020820190508181036000830152611d7f81611af9565b9050919050565b60006020820190508181036000830152611d9f81611b1c565b9050919050565b60006020820190508181036000830152611dbf81611b3f565b9050919050565b6000602082019050611ddb6000830184611b62565b92915050565b6000606082019050611df66000830186611b62565b611e036020830185611979565b611e106040830184611b62565b949350505050565b6000608082019050611e2d6000830187611b62565b611e3a6020830186611979565b611e476040830185611b62565b611e546060830184611b62565b95945050505050565b6000604082019050611e726000830185611b62565b611e7f6020830184611b62565b9392505050565b600060c082019050611e9b6000830189611b62565b611ea86020830188611b62565b611eb56040830187611b62565b611ec26060830186611b62565b611ecf6080830185611b62565b611edc60a0830184611b62565b979650505050505050565b6000611ef1611f02565b9050611efd828261212b565b919050565b6000604051905090565b600067ffffffffffffffff821115611f2757611f266121c4565b5b611f30826121f3565b9050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000611f7a826120c0565b9150611f85836120c0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611fba57611fb9612166565b5b828201905092915050565b6000611fd0826120c0565b9150611fdb836120c0565b925082611feb57611fea612195565b5b828204905092915050565b6000612001826120c0565b915061200c836120c0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561204557612044612166565b5b828202905092915050565b600061205b826120c0565b9150612066836120c0565b92508282101561207957612078612166565b5b828203905092915050565b600061208f826120a0565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006120e2826120c0565b9050919050565b82818337600083830152505050565b60005b838110156121165780820151818401526020810190506120fb565b83811115612125576000848401525b50505050565b612134826121f3565b810181811067ffffffffffffffff82111715612153576121526121c4565b5b80604052505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f77726f6e67207369676e65720000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f7061796c6f616420776173206d6f646966696564000000000000000000000000600082015250565b7f4e6f7420656e6f75676820737465707320617661696c61626c6520746f206d6f60008201527f7665207468657265000000000000000000000000000000000000000000000000602082015250565b7f4e6f7420656e6f756768742f746f6f206d7563682065746865722073656e7400600082015250565b7f796f7520616c7265616479207369676e65642075700000000000000000000000600082015250565b7f6c617374207175657269656420646f6573206e6f74206d617463680000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f796f75206e65656420746f206265207265676973746572656400000000000000600082015250565b6123ca81612084565b81146123d557600080fd5b50565b6123e181612096565b81146123ec57600080fd5b50565b6123f8816120c0565b811461240357600080fd5b50565b61240f816120ca565b811461241a57600080fd5b5056fea26469706673582212202a1d34b7b70f6a2ab9b7978c2a4d137dfd78a827b1b5f13e04a8a76db99c8ba664736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c80637912680d1161008a578063c04d0e5011610059578063c04d0e5014610297578063e2eb41ff146102c3578063e839665c14610305578063f2fde38b14610321576100e8565b80637912680d146101ef5780638da5cb5b14610218578063b93d28ee14610243578063ba1697161461026e576100e8565b8063240bcbfa116100c6578063240bcbfa146101685780633b72498a146101915780633fc90920146101bc578063715018a6146101d8576100e8565b80630b102d1a146100ed5780631815ce7d146101165780631822b8471461013f575b600080fd5b3480156100f957600080fd5b50610114600480360381019061010f9190611781565b61034a565b005b34801561012257600080fd5b5061013d60048036038101906101389190611781565b61040a565b005b34801561014b57600080fd5b50610166600480360381019061016191906117aa565b6104ca565b005b34801561017457600080fd5b5061018f600480360381019061018a91906117aa565b61068f565b005b34801561019d57600080fd5b506101a66107f1565b6040516101b39190611dc6565b60405180910390f35b6101d660048036038101906101d19190611833565b6107fd565b005b3480156101e457600080fd5b506101ed610a2c565b005b3480156101fb57600080fd5b5061021660048036038101906102119190611781565b610ab4565b005b34801561022457600080fd5b5061022d610b74565b60405161023a9190611ba8565b60405180910390f35b34801561024f57600080fd5b50610258610b9d565b6040516102659190611dc6565b60405180910390f35b34801561027a57600080fd5b5061029560048036038101906102909190611781565b610ba8565b005b3480156102a357600080fd5b506102ac610c68565b6040516102ba929190611e5d565b60405180910390f35b3480156102cf57600080fd5b506102ea60048036038101906102e59190611781565b610cbb565b6040516102fc96959493929190611e86565b60405180910390f35b61031f600480360381019061031a9190611902565b610cf7565b005b34801561032d57600080fd5b5061034860048036038101906103439190611781565b611061565b005b610352611159565b73ffffffffffffffffffffffffffffffffffffffff16610370610b74565b73ffffffffffffffffffffffffffffffffffffffff16146103c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103bd90611d86565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610412611159565b73ffffffffffffffffffffffffffffffffffffffff16610430610b74565b73ffffffffffffffffffffffffffffffffffffffff1614610486576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d90611d86565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600085856040516020016104df929190611e5d565b604051602081830303815290604052805190602001209050868114610539576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053090611ce6565b60405180910390fd5b60006040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250905060008189604051602001610588929190611b80565b6040516020818303038152906040528051906020012090506000600182888888604051600081526020016040526040516105c59493929190611c61565b6020604051602081039080840390855afa1580156105e7573d6000803e3d6000fd5b505050602060405103519050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610683576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067a90611ca6565b60405180910390fd5b50505050505050505050565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000154141561071a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071190611da6565b60405180910390fd5b80600201548514610760576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075790611d66565b60405180910390fd5b61076e8787878787876104ca565b858160040160008282546107829190611f6f565b925050819055508581600301600082825461079d9190611f6f565b925050819055504281600201819055507fea53fca5456139f39e787af7250a4c0571c46facc363f3083ec3fa7a0d65888e8633426040516107e093929190611de1565b60405180910390a150505050505050565b60028060000154905081565b610805611161565b662386f26fc10000341461084e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084590611d26565b60405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156108b857600080fd5b505af11580156108cc573d6000803e3d6000fd5b50505050506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0def52133846040518363ffffffff1660e01b8152600401610930929190611bfa565b602060405180830381600087803b15801561094a57600080fd5b505af115801561095e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610982919061189d565b905060008061098f610c68565b91509150600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f4881477843385856040518563ffffffff1660e01b81526004016109f49493929190611e18565b600060405180830381600087803b158015610a0e57600080fd5b505af1158015610a22573d6000803e3d6000fd5b5050505050505050565b610a34611159565b73ffffffffffffffffffffffffffffffffffffffff16610a52610b74565b73ffffffffffffffffffffffffffffffffffffffff1614610aa8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9f90611d86565b60405180910390fd5b610ab26000611247565b565b610abc611159565b73ffffffffffffffffffffffffffffffffffffffff16610ada610b74565b73ffffffffffffffffffffffffffffffffffffffff1614610b30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2790611d86565b60405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b662386f26fc1000081565b610bb0611159565b73ffffffffffffffffffffffffffffffffffffffff16610bce610b74565b73ffffffffffffffffffffffffffffffffffffffff1614610c24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1b90611d86565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080610c75600261130b565b6000610c816002611321565b90506000602a82610c929190611ff6565b9050600060109050602e831415610cae57610cad600261132f565b5b8181945094505050509091565b60046020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154908060050154905086565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f7b1393856040518263ffffffff1660e01b8152600401610d559190611dc6565b6040805180830381600087803b158015610d6e57600080fd5b505af1158015610d82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da691906118c6565b915091506000610db6838961133c565b90506000610dc4838961133c565b90506000610df28283610dd79190611ff6565b8485610de39190611ff6565b610ded9190611f6f565b61136b565b9050600a81610e019190611ff6565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015411610e84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7b90611d06565b60405180910390fd5b600a81610e919190611ff6565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000828254610ee29190612050565b92505081905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f488147788338d8d6040518563ffffffff1660e01b8152600401610f4a9493929190611e18565b600060405180830381600087803b158015610f6457600080fd5b505af1158015610f78573d6000803e3d6000fd5b505050506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334efcb8e8a6040518263ffffffff1660e01b8152600401610fd99190611dc6565b60c06040518083038186803b158015610ff157600080fd5b505afa158015611005573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110299190611874565b905080604001518b148015611041575080606001518a145b156110545761105381608001516113e5565b5b5050505050505050505050565b611069611159565b73ffffffffffffffffffffffffffffffffffffffff16611087610b74565b73ffffffffffffffffffffffffffffffffffffffff16146110dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d490611d86565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561114d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114490611cc6565b60405180910390fd5b61115681611247565b50565b600033905090565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000154146111eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e290611d46565b60405180910390fd5b6111f5600161130b565b6111ff6001611321565b816000018190555042816001018190555061a8c04261121e9190612050565b816002018190555060008160030181905550600081600401819055506000816005018190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6001816000016000828254019250508190555050565b600081600001549050919050565b6000816000018190555050565b60008183116113565782826113519190612050565b611363565b81836113629190612050565b5b905092915050565b600060038211156113d2578190506000600160028461138a9190611fc5565b6113949190611f6f565b90505b818110156113cc5780915060028182856113b19190611fc5565b6113bb9190611f6f565b6113c59190611fc5565b9050611397565b506113e0565b600082146113df57600190505b5b919050565b60018114156115d4576000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663285939846040518163ffffffff1660e01b815260040160206040518083038186803b15801561145857600080fd5b505afa15801561146c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611490919061189d565b90506000811180156114a65750642e90edd00081115b156115d257600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351cff8d9336040518263ffffffff1660e01b81526004016115069190611ba8565b600060405180830381600087803b15801561152057600080fd5b505af1158015611534573d6000803e3d6000fd5b5050505080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501600082825461158a9190611f6f565b925050819055507f59ef31821b015e51b3e5bf608636da7db2b7cde28283955437e586ebc48fc5c83382846040516115c493929190611c2a565b60405180910390a150611611565b505b7f59ef31821b015e51b3e5bf608636da7db2b7cde28283955437e586ebc48fc5c83360008360405161160893929190611bc3565b60405180910390a15b50565b600061162761162284611f0c565b611ee7565b90508281526020810184848401111561163f57600080fd5b61164a8482856120e9565b509392505050565b600081359050611661816123c1565b92915050565b600081359050611676816123d8565b92915050565b600082601f83011261168d57600080fd5b813561169d848260208601611614565b91505092915050565b600060c082840312156116b857600080fd5b6116c260c0611ee7565b905060006116d284828501611757565b60008301525060206116e684828501611757565b60208301525060406116fa84828501611757565b604083015250606061170e84828501611757565b606083015250608061172284828501611757565b60808301525060a061173684828501611757565b60a08301525092915050565b600081359050611751816123ef565b92915050565b600081519050611766816123ef565b92915050565b60008135905061177b81612406565b92915050565b60006020828403121561179357600080fd5b60006117a184828501611652565b91505092915050565b60008060008060008060c087890312156117c357600080fd5b60006117d189828a01611667565b96505060206117e289828a01611742565b95505060406117f389828a01611742565b945050606061180489828a0161176c565b935050608061181589828a01611667565b92505060a061182689828a01611667565b9150509295509295509295565b60006020828403121561184557600080fd5b600082013567ffffffffffffffff81111561185f57600080fd5b61186b8482850161167c565b91505092915050565b600060c0828403121561188657600080fd5b6000611894848285016116a6565b91505092915050565b6000602082840312156118af57600080fd5b60006118bd84828501611757565b91505092915050565b600080604083850312156118d957600080fd5b60006118e785828601611757565b92505060206118f885828601611757565b9150509250929050565b600080600080600060a0868803121561191a57600080fd5b600061192888828901611742565b955050602061193988828901611742565b945050604061194a88828901611742565b935050606061195b88828901611742565b925050608061196c88828901611742565b9150509295509295909350565b61198281612084565b82525050565b61199181612096565b82525050565b6119a86119a382612096565b61215c565b82525050565b60006119b982611f3d565b6119c38185611f53565b93506119d38185602086016120f8565b80840191505092915050565b6119e8816120d7565b82525050565b60006119f982611f48565b611a038185611f5e565b9350611a138185602086016120f8565b611a1c816121f3565b840191505092915050565b6000611a34600c83611f5e565b9150611a3f82612204565b602082019050919050565b6000611a57602683611f5e565b9150611a628261222d565b604082019050919050565b6000611a7a601483611f5e565b9150611a858261227c565b602082019050919050565b6000611a9d602883611f5e565b9150611aa8826122a5565b604082019050919050565b6000611ac0601f83611f5e565b9150611acb826122f4565b602082019050919050565b6000611ae3601583611f5e565b9150611aee8261231d565b602082019050919050565b6000611b06601b83611f5e565b9150611b1182612346565b602082019050919050565b6000611b29602083611f5e565b9150611b348261236f565b602082019050919050565b6000611b4c601983611f5e565b9150611b5782612398565b602082019050919050565b611b6b816120c0565b82525050565b611b7a816120ca565b82525050565b6000611b8c82856119ae565b9150611b988284611997565b6020820191508190509392505050565b6000602082019050611bbd6000830184611979565b92915050565b6000606082019050611bd86000830186611979565b611be560208301856119df565b611bf26040830184611b62565b949350505050565b6000604082019050611c0f6000830185611979565b8181036020830152611c2181846119ee565b90509392505050565b6000606082019050611c3f6000830186611979565b611c4c6020830185611b62565b611c596040830184611b62565b949350505050565b6000608082019050611c766000830187611988565b611c836020830186611b71565b611c906040830185611988565b611c9d6060830184611988565b95945050505050565b60006020820190508181036000830152611cbf81611a27565b9050919050565b60006020820190508181036000830152611cdf81611a4a565b9050919050565b60006020820190508181036000830152611cff81611a6d565b9050919050565b60006020820190508181036000830152611d1f81611a90565b9050919050565b60006020820190508181036000830152611d3f81611ab3565b9050919050565b60006020820190508181036000830152611d5f81611ad6565b9050919050565b60006020820190508181036000830152611d7f81611af9565b9050919050565b60006020820190508181036000830152611d9f81611b1c565b9050919050565b60006020820190508181036000830152611dbf81611b3f565b9050919050565b6000602082019050611ddb6000830184611b62565b92915050565b6000606082019050611df66000830186611b62565b611e036020830185611979565b611e106040830184611b62565b949350505050565b6000608082019050611e2d6000830187611b62565b611e3a6020830186611979565b611e476040830185611b62565b611e546060830184611b62565b95945050505050565b6000604082019050611e726000830185611b62565b611e7f6020830184611b62565b9392505050565b600060c082019050611e9b6000830189611b62565b611ea86020830188611b62565b611eb56040830187611b62565b611ec26060830186611b62565b611ecf6080830185611b62565b611edc60a0830184611b62565b979650505050505050565b6000611ef1611f02565b9050611efd828261212b565b919050565b6000604051905090565b600067ffffffffffffffff821115611f2757611f266121c4565b5b611f30826121f3565b9050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000611f7a826120c0565b9150611f85836120c0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611fba57611fb9612166565b5b828201905092915050565b6000611fd0826120c0565b9150611fdb836120c0565b925082611feb57611fea612195565b5b828204905092915050565b6000612001826120c0565b915061200c836120c0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561204557612044612166565b5b828202905092915050565b600061205b826120c0565b9150612066836120c0565b92508282101561207957612078612166565b5b828203905092915050565b600061208f826120a0565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006120e2826120c0565b9050919050565b82818337600083830152505050565b60005b838110156121165780820151818401526020810190506120fb565b83811115612125576000848401525b50505050565b612134826121f3565b810181811067ffffffffffffffff82111715612153576121526121c4565b5b80604052505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f77726f6e67207369676e65720000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f7061796c6f616420776173206d6f646966696564000000000000000000000000600082015250565b7f4e6f7420656e6f75676820737465707320617661696c61626c6520746f206d6f60008201527f7665207468657265000000000000000000000000000000000000000000000000602082015250565b7f4e6f7420656e6f756768742f746f6f206d7563682065746865722073656e7400600082015250565b7f796f7520616c7265616479207369676e65642075700000000000000000000000600082015250565b7f6c617374207175657269656420646f6573206e6f74206d617463680000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f796f75206e65656420746f206265207265676973746572656400000000000000600082015250565b6123ca81612084565b81146123d557600080fd5b50565b6123e181612096565b81146123ec57600080fd5b50565b6123f8816120c0565b811461240357600080fd5b50565b61240f816120ca565b811461241a57600080fd5b5056fea26469706673582212202a1d34b7b70f6a2ab9b7978c2a4d137dfd78a827b1b5f13e04a8a76db99c8ba664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "moveShip(uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Move the ship to a new position {_planetId} the planet you want to reach {_shipId} the ship you are moving"
      },
      "registerProfile(string)": {
        "notice": "Creates the user profile of the user and mints a starship nft and forwards $$ to the treasury"
      },
      "setAaveVault(address)": {
        "notice": "We set the Worldcontract Contract, this can also be done in the constructor"
      },
      "setBackendAddress(address)": {
        "notice": "The address of our web2 backend. Messages from the backend which are verified in this contract"
      },
      "setNftAddress(address)": {
        "notice": "We set the Nft Contract, this can also be done in the constructor"
      },
      "setWorldAddress(address)": {
        "notice": "We set the Worldcontract Contract, this can also be done in the constructor"
      },
      "syncSteps(bytes32,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Sync the steps for the user"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 617,
        "contract": "contracts/Players.sol:Players",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4136,
        "contract": "contracts/Players.sol:Players",
        "label": "indexPlayerIds",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)2881_storage"
      },
      {
        "astId": 4139,
        "contract": "contracts/Players.sol:Players",
        "label": "indexStartingPosition",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Counter)2881_storage"
      },
      {
        "astId": 4141,
        "contract": "contracts/Players.sol:Players",
        "label": "backendAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4146,
        "contract": "contracts/Players.sol:Players",
        "label": "players",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(PersonProfile)4133_storage)"
      },
      {
        "astId": 4149,
        "contract": "contracts/Players.sol:Players",
        "label": "nftContract",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IPlanet)5459"
      },
      {
        "astId": 4152,
        "contract": "contracts/Players.sol:Players",
        "label": "worldContract",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IWorld)5472"
      },
      {
        "astId": 4155,
        "contract": "contracts/Players.sol:Players",
        "label": "aaveVaultContract",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IHashVault)5424"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IHashVault)5424": {
        "encoding": "inplace",
        "label": "contract IHashVault",
        "numberOfBytes": "20"
      },
      "t_contract(IPlanet)5459": {
        "encoding": "inplace",
        "label": "contract IPlanet",
        "numberOfBytes": "20"
      },
      "t_contract(IWorld)5472": {
        "encoding": "inplace",
        "label": "contract IWorld",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(PersonProfile)4133_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Players.PersonProfile)",
        "numberOfBytes": "32",
        "value": "t_struct(PersonProfile)4133_storage"
      },
      "t_struct(Counter)2881_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2880,
            "contract": "contracts/Players.sol:Players",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PersonProfile)4133_storage": {
        "encoding": "inplace",
        "label": "struct Players.PersonProfile",
        "members": [
          {
            "astId": 4122,
            "contract": "contracts/Players.sol:Players",
            "label": "playerId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4124,
            "contract": "contracts/Players.sol:Players",
            "label": "timeJoined",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4126,
            "contract": "contracts/Players.sol:Players",
            "label": "lastQueried",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4128,
            "contract": "contracts/Players.sol:Players",
            "label": "stepsAvailable",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4130,
            "contract": "contracts/Players.sol:Players",
            "label": "totalStepsTaken",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4132,
            "contract": "contracts/Players.sol:Players",
            "label": "amountEarned",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}