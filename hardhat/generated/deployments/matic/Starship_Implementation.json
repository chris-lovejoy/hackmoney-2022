{
  "address": "0xC62a19aA8eE0c6a76FA35eA54139174247B1a11A",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address payable",
          "name": "relayerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        }
      ],
      "name": "MetaTransactionExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ERC712_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_proxyRegistryAddress",
          "type": "address"
        }
      ],
      "name": "__ERC721TradableUpgradeable_init_unchained",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "sigR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "sigS",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "sigV",
          "type": "uint8"
        }
      ],
      "name": "executeMetaTransaction",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeperator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getLocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getShips",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct Starship.ShipData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxyRegistryAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "mintTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "playerContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_ownerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "name": "setLocation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newPlayerContract",
          "type": "address"
        }
      ],
      "name": "setPlayerContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd070ec2e425657b31a6eac1a23f1920445ef4ce1fbef17c9299156d89e83efab",
  "receipt": {
    "to": null,
    "from": "0x8d3b5Bd6CeB7217c537411D976DB557f80E64487",
    "contractAddress": "0xC62a19aA8eE0c6a76FA35eA54139174247B1a11A",
    "transactionIndex": 5,
    "gasUsed": "4497230",
    "logsBloom": "0x
    "blockHash": "0x506dd3685dc30df79a4f49b424990d867de2708d17843dc62a700988d85621aa",
    "transactionHash": "0xd070ec2e425657b31a6eac1a23f1920445ef4ce1fbef17c9299156d89e83efab",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 26904273,
        "transactionHash": "0xd070ec2e425657b31a6eac1a23f1920445ef4ce1fbef17c9299156d89e83efab",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008d3b5bd6ceb7217c537411d976db557f80e64487",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001e0b483fade36800000000000000000000000000000000000000000000000070c981a6650d4a78000000000000000000000000000000000000000000000f4bd60e94ab2285960d00000000000000000000000000000000000000000000000070ab765e255f6710000000000000000000000000000000000000000000000f4bd62c9ff362337975",
        "logIndex": 11,
        "blockHash": "0x506dd3685dc30df79a4f49b424990d867de2708d17843dc62a700988d85621aa"
      }
    ],
    "blockNumber": 26904273,
    "cumulativeGasUsed": "5190555",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6d824f0fd39aeb1a73164b872efbe39a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC712_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_proxyRegistryAddress\",\"type\":\"address\"}],\"name\":\"__ERC721TradableUpgradeable_init_unchained\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeperator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getLocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getShips\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct Starship.ShipData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyRegistryAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playerContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"setLocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPlayerContract\",\"type\":\"address\"}],\"name\":\"setPlayerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"mintTo(address)\":{\"details\":\"Mints a token to an address with a tokenURI.\",\"params\":{\"_to\":\"address of the future owner of the token\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"totalSupply()\":{\"details\":\"Returns the total tokens minted so far. 1 is always subtracted from the Counter since it tracks the next available tokenId.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getLocation(uint256)\":{\"notice\":\"gets the location of the ship\"},\"getShips()\":{\"notice\":\"Returns all ships in the game\"},\"mint(address,string)\":{\"notice\":\"mints a new nft ship\"},\"setLocation(uint256,address,uint256,uint256)\":{\"notice\":\"secure, only allow calls from PlayerContract. DONE\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFT.sol\":\"Starship\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0xa9ee8ba9953f4339e308abde06d64195b81852b5c605cfb738582a03ddf20099\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5d3b80a09c746aed89446a14d0e8f5ba5212520360d00a495a2156a7a51497e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorageUpgradeable is Initializable, ERC721Upgradeable {\\n    function __ERC721URIStorage_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721URIStorage_init_unchained() internal onlyInitializing {\\n    }\\n    using StringsUpgradeable for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb303bc91198bfd82a8ac2eaf1613352d39d9302dc0084e90224e238ea2f61466\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/ERC721TradableUpgradeable.sol\":{\"content\":\"\\n//SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./opensealibs/ContentMixin.sol\\\";\\nimport \\\"./opensealibs/NativeMetaTransaction.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract OwnableDelegateProxy {}\\n\\n/**\\n * Used to delegate ownership of a contract to another address, to save on unneeded transactions to approve contract use for users\\n */\\ncontract ProxyRegistry {\\n    mapping(address => OwnableDelegateProxy) public proxies;\\n}\\n\\n/**\\n * @title ERC721Tradable\\n * ERC721Tradable - ERC721 contract that whitelists a trading address, and has minting functionality.\\n */\\nabstract contract ERC721TradableUpgradeable is ERC721Upgradeable, ContextMixin,\\nNativeMetaTransaction, OwnableUpgradeable {\\n    using SafeMath for uint256;\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    /**\\n     * We rely on the OZ Counter util to keep track of the next available ID.\\n     * We track the nextTokenId instead of the currentTokenId to save users on gas costs.\\n     * Read more about it here: https://shiny.mirror.xyz/OUampBbIz9ebEicfGnQf5At_ReMHlZy0tB4glb9xQ0E\\n     */\\n    CountersUpgradeable.Counter private _nextTokenId;\\n    address proxyRegistryAddress;\\n\\n\\n\\n    function __ERC721TradableUpgradeable_init_unchained(\\n        string memory _name,\\n        string memory _symbol,\\n        address _proxyRegistryAddress\\n    ) public initializer {\\n        __Ownable_init_unchained();\\n        __ERC721_init_unchained(_name, _symbol);\\n        proxyRegistryAddress = _proxyRegistryAddress;\\n        // nextTokenId is initialized to 1, since starting at 0 leads to higher gas cost for the first minter\\n        _nextTokenId.increment();\\n        _initializeEIP712(_name);\\n    }\\n\\n    /**\\n     * @dev Mints a token to an address with a tokenURI.\\n     * @param _to address of the future owner of the token\\n     */\\n    function mintTo(address _to) public onlyOwner {\\n        uint256 currentTokenId = _nextTokenId.current();\\n        _nextTokenId.increment();\\n        _safeMint(_to, currentTokenId);\\n    }\\n\\n    /**\\n        @dev Returns the total tokens minted so far.\\n        1 is always subtracted from the Counter since it tracks the next available tokenId.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _nextTokenId.current() - 1;\\n    }\\n\\n    function baseTokenURI() virtual public pure returns (string memory);\\n\\n    function tokenURI(uint256 _tokenId) override virtual public view returns (string memory) {\\n        return string(abi.encodePacked(baseTokenURI(), StringsUpgradeable.toString(_tokenId)));\\n    }\\n\\n    /**\\n     * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        override\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        // Whitelist OpenSea proxy contract for easy trading.\\n        ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\\n        if (address(proxyRegistry.proxies(owner)) == operator) {\\n            return true;\\n        }\\n\\n        return super.isApprovedForAll(owner, operator);\\n    }\\n\\n    /**\\n     * This is used instead of msg.sender as transactions won't be sent by the original token owner, but by OpenSea.\\n     */\\n    function _msgSender()\\n        internal\\n        override\\n        virtual\\n        view\\n        returns (address sender)\\n    {\\n        return ContextMixin.msgSender();\\n    }\\n}\",\"keccak256\":\"0x4d2dd134de0e9fafa7692088df87e5572c443930df578cb886773ea1dfa1295d\",\"license\":\"Unlicense\"},\"contracts/NFT.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\\\";\\nimport \\\"./interfaces/IShip.sol\\\";\\nimport \\\"./ERC721TradableUpgradeable.sol\\\";\\n\\n\\ncontract Starship is  OwnableUpgradeable, ERC721TradableUpgradeable,\\nERC721URIStorageUpgradeable, IShip{\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n    CountersUpgradeable.Counter public tokenId;\\n\\n    struct ShipData {\\n            uint x;\\n            uint y;\\n            address owner;\\n            uint id;\\n    }\\n\\n    address public playerContract;\\n\\n    // mapping tokenId to shipData\\n    mapping (uint256 => ShipData) shipData;\\n\\n    modifier onlyPlayerContract() {\\n        require (msg.sender == playerContract);\\n        _;\\n    }\\n\\n\\n    function initialize(address _proxyRegistryAddress) public initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721TradableUpgradeable_init_unchained(\\\"StarShip\\\", \\\"SHIP\\\", _proxyRegistryAddress);\\n    }\\n\\n\\n    function getLocation(\\n        uint256 _tokenId\\n    ) public override view returns (uint x, uint y) {\\n         ShipData memory location = shipData[_tokenId];\\n         return (location.x, location.y);\\n    }\\n\\n    function _msgSender() internal override(ContextUpgradeable, ERC721TradableUpgradeable) view returns (address sender)\\n    {\\n        return super.msgSender();\\n    }\\n\\n\\n    function isApprovedForAll(address owner, address operator) override(ERC721Upgradeable, ERC721TradableUpgradeable) public view returns (bool){\\n        return super.isApprovedForAll(owner, operator);\\n    }\\n\\n    function baseTokenURI() override(ERC721TradableUpgradeable) public pure returns (string memory){\\n        return \\\"ipfs://\\\";\\n    }\\n\\n\\n    /**\\n        secure, only allow calls from PlayerContract. DONE\\n     */\\n    function setLocation(\\n        uint256 _tokenId,\\n        address _ownerAddress,\\n        uint x,\\n        uint y\\n    ) public onlyPlayerContract override {\\n        require(ownerOf(_tokenId) == _ownerAddress, \\\"not allowed to update\\\");\\n        shipData[_tokenId].x = x;\\n        shipData[_tokenId].y = y;\\n    }\\n\\n    function setPlayerContract(address _newPlayerContract) public onlyOwner {\\n        playerContract = _newPlayerContract;\\n    }\\n\\n    function mint(address player, string memory _tokenURI) public onlyPlayerContract override returns (uint256) {\\n        tokenId.increment();\\n\\n        uint256 newItemId = tokenId.current();\\n        _mint(player, newItemId);\\n        _setTokenURI(newItemId, _tokenURI);\\n\\n        return newItemId;\\n    }\\n\\n    /**\\n        Returns all ships in the game\\n     */\\n    function getShips() public view returns(ShipData[] memory) {\\n        uint tokenCount = tokenId.current() + 1;\\n        ShipData[] memory ships = new ShipData[](tokenCount);\\n        for (uint j = 0; j < tokenCount; j++) {\\n            ShipData memory ship = shipData[j];\\n            ships[j] = ship;\\n        }\\n        return ships;\\n    }\\n\\n    /**\\n        To allow transfer of ships\\n     */\\n    function _afterTokenTransfer(address from,address to,uint256 tokenId) internal override {\\n        shipData[tokenId].owner = to;\\n        shipData[tokenId].id = tokenId;\\n    }\\n\\n            function _burn(uint256 tokenId) internal override(ERC721URIStorageUpgradeable, ERC721Upgradeable)\\n    {\\n        super._burn(tokenId);\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override(ERC721TradableUpgradeable, ERC721URIStorageUpgradeable) returns (string memory)\\n    {\\n        return super.tokenURI(tokenId);\\n    }\\n}\",\"keccak256\":\"0xa011875ac324ef1a0181232c670c7bc56de5efafcb4dedc8cb84762dfe6a93da\",\"license\":\"Unlicense\"},\"contracts/interfaces/IShip.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IShip {\\n    /**\\n      gets the location of the ship\\n    */\\n    function getLocation(\\n        uint256 _tokenId\\n    ) external returns (uint x, uint y);\\n\\n    /**\\n      sets the location of the ship\\n    */\\n    function setLocation(\\n        uint256 _tokenId,\\n        address _ownerAddress,\\n        uint x,\\n        uint y\\n    ) external;\\n\\n    /**\\n      mints a new nft ship\\n     */\\n    function mint(address player, string memory _tokenURI) external returns (uint256);\\n}\",\"keccak256\":\"0x4fb97e54481f310d6f394929fa78af8569e24efa80ded5d4e4dcd78d7206b244\",\"license\":\"Unlicense\"},\"contracts/opensealibs/ContentMixin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract ContextMixin {\\n    function msgSender()\\n        internal\\n        view\\n        returns (address payable sender)\\n    {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender := and(\\n                    mload(add(array, index)),\\n                    0xffffffffffffffffffffffffffffffffffffffff\\n                )\\n            }\\n        } else {\\n            sender = payable(msg.sender);\\n        }\\n        return sender;\\n    }\\n}\",\"keccak256\":\"0x75cc75d416c24a59b695e8418abacc91fe6da7a1e76d791b660e7e6a8e89aa7e\",\"license\":\"MIT\"},\"contracts/opensealibs/EIP712Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract EIP712Base is Initializable {\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        address verifyingContract;\\n        bytes32 salt;\\n    }\\n\\n    string constant public ERC712_VERSION = \\\"1\\\";\\n\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(\\n        bytes(\\n            \\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\"\\n        )\\n    );\\n    bytes32 internal domainSeperator;\\n\\n    // supposed to be called once while initializing.\\n    // one of the contracts that inherits this contract follows proxy pattern\\n    // so it is not possible to do this in a constructor\\n    function _initializeEIP712(\\n        string memory name\\n    )\\n        internal\\n        initializer\\n    {\\n        _setDomainSeperator(name);\\n    }\\n\\n    function _setDomainSeperator(string memory name) internal {\\n        domainSeperator = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(ERC712_VERSION)),\\n                address(this),\\n                bytes32(getChainId())\\n            )\\n        );\\n    }\\n\\n    function getDomainSeperator() public view returns (bytes32) {\\n        return domainSeperator;\\n    }\\n\\n    function getChainId() public view returns (uint256) {\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    /**\\n     * Accept message hash and returns hash message in EIP712 compatible form\\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\\n     * https://eips.ethereum.org/EIPS/eip-712\\n     * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\n     * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\n     */\\n    function toTypedMessageHash(bytes32 messageHash)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeperator(), messageHash)\\n            );\\n    }\\n}\",\"keccak256\":\"0x5a13dbbfe8ecacdfc2cfabb2a3bb75bf264ee93e5e2d397becac452c8bc18314\",\"license\":\"MIT\"},\"contracts/opensealibs/NativeMetaTransaction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./EIP712Base.sol\\\";\\n\\ncontract NativeMetaTransaction is EIP712Base {\\n    using SafeMath for uint256;\\n    bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(\\n        bytes(\\n            \\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"\\n        )\\n    );\\n    event MetaTransactionExecuted(\\n        address userAddress,\\n        address payable relayerAddress,\\n        bytes functionSignature\\n    );\\n    mapping(address => uint256) nonces;\\n\\n    /*\\n     * Meta transaction structure.\\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\n     * He should call the desired function directly in that case.\\n     */\\n    struct MetaTransaction {\\n        uint256 nonce;\\n        address from;\\n        bytes functionSignature;\\n    }\\n\\n    function executeMetaTransaction(\\n        address userAddress,\\n        bytes memory functionSignature,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) public payable returns (bytes memory) {\\n        MetaTransaction memory metaTx = MetaTransaction({\\n            nonce: nonces[userAddress],\\n            from: userAddress,\\n            functionSignature: functionSignature\\n        });\\n\\n        require(\\n            verify(userAddress, metaTx, sigR, sigS, sigV),\\n            \\\"Signer and signature do not match\\\"\\n        );\\n\\n        // increase nonce for user (to avoid re-use)\\n        nonces[userAddress] = nonces[userAddress].add(1);\\n\\n        emit MetaTransactionExecuted(\\n            userAddress,\\n            payable(msg.sender),\\n            functionSignature\\n        );\\n\\n        // Append userAddress and relayer address at the end to extract it from calling context\\n        (bool success, bytes memory returnData) = address(this).call(\\n            abi.encodePacked(functionSignature, userAddress)\\n        );\\n        require(success, \\\"Function call not successful\\\");\\n\\n        return returnData;\\n    }\\n\\n    function hashMetaTransaction(MetaTransaction memory metaTx)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    META_TRANSACTION_TYPEHASH,\\n                    metaTx.nonce,\\n                    metaTx.from,\\n                    keccak256(metaTx.functionSignature)\\n                )\\n            );\\n    }\\n\\n    function getNonce(address user) public view returns (uint256 nonce) {\\n        nonce = nonces[user];\\n    }\\n\\n    function verify(\\n        address signer,\\n        MetaTransaction memory metaTx,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) internal view returns (bool) {\\n        require(signer != address(0), \\\"NativeMetaTransaction: INVALID_SIGNER\\\");\\n        return\\n            signer ==\\n            ecrecover(\\n                toTypedMessageHash(hashMetaTransaction(metaTx)),\\n                sigV,\\n                sigR,\\n                sigS\\n            );\\n    }\\n}\",\"keccak256\":\"0x29c6a6cab86cb2ab68ba1f2ca0c2b93fb95247b22f46f68f85a39bf30c5c742f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506150cd806100206000396000f3fe6080604052600436106101ee5760003560e01c806370a082311161010d578063b88d4fde116100a0578063d0def5211161006f578063d0def52114610705578063d547cfb714610742578063e985e9c51461076d578063f2fde38b146107aa578063f4881477146107d3576101ee565b8063b88d4fde1461064b578063c4d66de814610674578063c87b56dd1461069d578063cb7792a7146106da576101ee565b80638da5cb5b116100dc5780638da5cb5b146105a357806391df6c70146105ce57806395d89b41146105f7578063a22cb46514610622576101ee565b806370a08231146104e8578063715018a614610525578063755edd171461053c5780637f7b139314610565576101ee565b806320379ee511610185578063365ea84611610154578063365ea8461461042e57806342842e0e146104575780636352211e146104805780636738f234146104bd576101ee565b806320379ee51461037257806323b872dd1461039d5780632d0335ab146103c65780633408e47014610403576101ee565b80630c53c51c116101c15780630c53c51c146102c15780630f7e5970146102f157806317d70f7c1461031c57806318160ddd14610347576101ee565b806301ffc9a7146101f357806306fdde0314610230578063081812fc1461025b578063095ea7b314610298575b600080fd5b3480156101ff57600080fd5b5061021a6004803603810190610215919061373c565b6107fc565b6040516102279190613fbf565b60405180910390f35b34801561023c57600080fd5b506102456108de565b604051610252919061410f565b60405180910390f35b34801561026757600080fd5b50610282600480360381019061027d9190613836565b610970565b60405161028f9190613ef8565b60405180910390f35b3480156102a457600080fd5b506102bf60048036038101906102ba9190613700565b6109f5565b005b6102db60048036038101906102d6919061361d565b610b0d565b6040516102e891906140d2565b60405180910390f35b3480156102fd57600080fd5b50610306610d7f565b604051610313919061410f565b60405180910390f35b34801561032857600080fd5b50610331610db8565b60405161033e9190614411565b60405180910390f35b34801561035357600080fd5b5061035c610dc4565b6040516103699190614411565b60405180910390f35b34801561037e57600080fd5b50610387610de1565b6040516103949190613fda565b60405180910390f35b3480156103a957600080fd5b506103c460048036038101906103bf9190613517565b610deb565b005b3480156103d257600080fd5b506103ed60048036038101906103e891906134b2565b610e4b565b6040516103fa9190614411565b60405180910390f35b34801561040f57600080fd5b50610418610e94565b6040516104259190614411565b60405180910390f35b34801561043a57600080fd5b50610455600480360381019061045091906137b7565b610ea1565b005b34801561046357600080fd5b5061047e60048036038101906104799190613517565b610f96565b005b34801561048c57600080fd5b506104a760048036038101906104a29190613836565b610fb6565b6040516104b49190613ef8565b60405180910390f35b3480156104c957600080fd5b506104d2611068565b6040516104df9190613f9d565b60405180910390f35b3480156104f457600080fd5b5061050f600480360381019061050a91906134b2565b611206565b60405161051c9190614411565b60405180910390f35b34801561053157600080fd5b5061053a6112be565b005b34801561054857600080fd5b50610563600480360381019061055e91906134b2565b611346565b005b34801561057157600080fd5b5061058c60048036038101906105879190613836565b6113e8565b60405161059a92919061442c565b60405180910390f35b3480156105af57600080fd5b506105b8611496565b6040516105c59190613ef8565b60405180910390f35b3480156105da57600080fd5b506105f560048036038101906105f091906134b2565b6114c0565b005b34801561060357600080fd5b5061060c611581565b604051610619919061410f565b60405180910390f35b34801561062e57600080fd5b50610649600480360381019061064491906135e1565b611613565b005b34801561065757600080fd5b50610672600480360381019061066d9190613566565b611629565b005b34801561068057600080fd5b5061069b600480360381019061069691906134b2565b61168b565b005b3480156106a957600080fd5b506106c460048036038101906106bf9190613836565b61179d565b6040516106d1919061410f565b60405180910390f35b3480156106e657600080fd5b506106ef6117af565b6040516106fc9190613ef8565b60405180910390f35b34801561071157600080fd5b5061072c600480360381019061072791906136ac565b6117d6565b6040516107399190614411565b60405180910390f35b34801561074e57600080fd5b50610757611869565b604051610764919061410f565b60405180910390f35b34801561077957600080fd5b50610794600480360381019061078f91906134db565b6118a6565b6040516107a19190613fbf565b60405180910390f35b3480156107b657600080fd5b506107d160048036038101906107cc91906134b2565b6118ba565b005b3480156107df57600080fd5b506107fa60048036038101906107f5919061385f565b6119b2565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806108c757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806108d757506108d682611ac1565b5b9050919050565b6060606580546108ed90614721565b80601f016020809104026020016040519081016040528092919081815260200182805461091990614721565b80156109665780601f1061093b57610100808354040283529160200191610966565b820191906000526020600020905b81548152906001019060200180831161094957829003601f168201915b5050505050905090565b600061097b82611b2b565b6109ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b190614331565b60405180910390fd5b6069600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610a0082610fb6565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6890614391565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610a90611b97565b73ffffffffffffffffffffffffffffffffffffffff161480610abf5750610abe81610ab9611b97565b6118a6565b5b610afe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af590614251565b60405180910390fd5b610b088383611ba6565b505050565b606060006040518060600160405280609860008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481526020018873ffffffffffffffffffffffffffffffffffffffff168152602001878152509050610b908782878787611c5f565b610bcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc690614371565b60405180910390fd5b610c226001609860008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d6890919063ffffffff16565b609860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b873388604051610c9893929190613f13565b60405180910390a16000803073ffffffffffffffffffffffffffffffffffffffff16888a604051602001610ccd929190613e75565b604051602081830303815290604052604051610ce99190613e5e565b6000604051808303816000865af19150503d8060008114610d26576040519150601f19603f3d011682016040523d82523d6000602084013e610d2b565b606091505b509150915081610d70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6790614171565b60405180910390fd5b80935050505095945050505050565b6040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081565b60ff8060000154905081565b60006001610dd260cb611d7e565b610ddc91906145ea565b905090565b6000609754905090565b610dfc610df6611b97565b82611d8c565b610e3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e32906143b1565b60405180910390fd5b610e46838383611e6a565b505050565b6000609860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000804690508091505090565b6000610ead60016120d1565b90508015610ed1576001600060016101000a81548160ff0219169083151502179055505b610ed96121c1565b610ee38484612222565b8160cc60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610f2e60cb6122a3565b610f37846122b9565b8015610f905760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610f8791906140f4565b60405180910390a15b50505050565b610fb183838360405180602001604052806000815250611629565b505050565b6000806067600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561105f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105690614291565b60405180910390fd5b80915050919050565b60606000600161107860ff611d7e565b6110829190614563565b905060008167ffffffffffffffff8111156110c6577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156110ff57816020015b6110ec613259565b8152602001906001900390816110e45790505b50905060005b828110156111fd576000610101600083815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815250509050808383815181106111de577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052505080806111f590614784565b915050611105565b50809250505090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611277576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126e90614271565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6112c6611b97565b73ffffffffffffffffffffffffffffffffffffffff166112e4611496565b73ffffffffffffffffffffffffffffffffffffffff161461133a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133190614351565b60405180910390fd5b611344600061234f565b565b61134e611b97565b73ffffffffffffffffffffffffffffffffffffffff1661136c611496565b73ffffffffffffffffffffffffffffffffffffffff16146113c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b990614351565b60405180910390fd5b60006113ce60cb611d7e565b90506113da60cb6122a3565b6113e48282612415565b5050565b6000806000610101600085815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815250509050806000015181602001519250925050915091565b6000609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6114c8611b97565b73ffffffffffffffffffffffffffffffffffffffff166114e6611496565b73ffffffffffffffffffffffffffffffffffffffff161461153c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153390614351565b60405180910390fd5b8061010060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606066805461159090614721565b80601f01602080910402602001604051908101604052809291908181526020018280546115bc90614721565b80156116095780601f106115de57610100808354040283529160200191611609565b820191906000526020600020905b8154815290600101906020018083116115ec57829003601f168201915b5050505050905090565b61162561161e611b97565b8383612433565b5050565b61163a611634611b97565b83611d8c565b611679576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611670906143b1565b60405180910390fd5b611685848484846125a0565b50505050565b600061169760016120d1565b905080156116bb576001600060016101000a81548160ff0219169083151502179055505b6116c36125fc565b6116cb61264d565b6117406040518060400160405280600881526020017f53746172536869700000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f534849500000000000000000000000000000000000000000000000000000000081525084610ea1565b80156117995760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161179091906140f4565b60405180910390a15b5050565b60606117a88261269e565b9050919050565b61010060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061010060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461183357600080fd5b61183d60ff6122a3565b600061184960ff611d7e565b905061185584826127f0565b61185f81846129ca565b8091505092915050565b60606040518060400160405280600781526020017f697066733a2f2f00000000000000000000000000000000000000000000000000815250905090565b60006118b28383612a3e565b905092915050565b6118c2611b97565b73ffffffffffffffffffffffffffffffffffffffff166118e0611496565b73ffffffffffffffffffffffffffffffffffffffff1614611936576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192d90614351565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156119a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199d90614151565b60405180910390fd5b6119af8161234f565b50565b61010060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a0d57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff16611a2d85610fb6565b73ffffffffffffffffffffffffffffffffffffffff1614611a83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7a906143f1565b60405180910390fd5b816101016000868152602001908152602001600020600001819055508061010160008681526020019081526020016000206001018190555050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166067600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6000611ba1612b40565b905090565b816069600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611c1983610fb6565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415611cd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc790614231565b60405180910390fd5b6001611ce3611cde87612bf1565b612c59565b83868660405160008152602001604052604051611d03949392919061408d565b6020604051602081039080840390855afa158015611d25573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614905095945050505050565b60008183611d769190614563565b905092915050565b600081600001549050919050565b6000611d9782611b2b565b611dd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dcd90614211565b60405180910390fd5b6000611de183610fb6565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611e235750611e2281856118a6565b5b80611e6157508373ffffffffffffffffffffffffffffffffffffffff16611e4984610970565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611e8a82610fb6565b73ffffffffffffffffffffffffffffffffffffffff1614611ee0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed790614191565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f47906141d1565b60405180910390fd5b611f5b838383612c92565b611f66600082611ba6565b6001606860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611fb691906145ea565b925050819055506001606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461200d9190614563565b92505081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46120cc838383612c97565b505050565b60008060019054906101000a900460ff16156121485760018260ff1614801561210057506120fe30612d0e565b155b61213f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612136906142d1565b60405180910390fd5b600090506121bc565b8160ff1660008054906101000a900460ff1660ff161061219d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612194906142d1565b60405180910390fd5b816000806101000a81548160ff021916908360ff160217905550600190505b919050565b600060019054906101000a900460ff16612210576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612207906143d1565b60405180910390fd5b61222061221b611b97565b61234f565b565b600060019054906101000a900460ff16612271576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612268906143d1565b60405180910390fd5b8160659080519060200190612287929190613297565b50806066908051906020019061229e929190613297565b505050565b6001816000016000828254019250508190555050565b60006122c560016120d1565b905080156122e9576001600060016101000a81548160ff0219169083151502179055505b6122f282612d31565b801561234b5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161234291906140f4565b60405180910390a15b5050565b6000609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081609960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61242f828260405180602001604052806000815250612dd5565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156124a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612499906141f1565b60405180910390fd5b80606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516125939190613fbf565b60405180910390a3505050565b6125ab848484611e6a565b6125b784848484612e30565b6125f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125ed90614131565b60405180910390fd5b50505050565b600060019054906101000a900460ff1661264b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612642906143d1565b60405180910390fd5b565b600060019054906101000a900460ff1661269c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612693906143d1565b60405180910390fd5b565b60606126a982611b2b565b6126e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126df90614311565b60405180910390fd5b600060cd6000848152602001908152602001600020805461270890614721565b80601f016020809104026020016040519081016040528092919081815260200182805461273490614721565b80156127815780601f1061275657610100808354040283529160200191612781565b820191906000526020600020905b81548152906001019060200180831161276457829003601f168201915b505050505090506000612792612fc7565b90506000815114156127a85781925050506127eb565b6000825111156127dd5780826040516020016127c5929190613e9d565b604051602081830303815290604052925050506127eb565b6127e684612fde565b925050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612860576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612857906142f1565b60405180910390fd5b61286981611b2b565b156128a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128a0906141b1565b60405180910390fd5b6128b560008383612c92565b6001606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546129059190614563565b92505081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46129c660008383612c97565b5050565b6129d382611b2b565b612a12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a09906142b1565b60405180910390fd5b8060cd60008481526020019081526020016000209080519060200190612a39929190613297565b505050565b60008060cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663c4552791866040518263ffffffff1660e01b8152600401612ab69190613ef8565b60206040518083038186803b158015612ace57600080fd5b505afa158015612ae2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b06919061378e565b73ffffffffffffffffffffffffffffffffffffffff161415612b2c576001915050612b3a565b612b368484613018565b9150505b92915050565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415612bea57600080368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600080369050905073ffffffffffffffffffffffffffffffffffffffff818301511692505050612bee565b3390505b90565b6000604051806080016040528060438152602001615006604391398051906020012082600001518360200151846040015180519060200120604051602001612c3c9493929190614048565b604051602081830303815290604052805190602001209050919050565b6000612c63610de1565b82604051602001612c75929190613ec1565b604051602081830303815290604052805190602001209050919050565b505050565b81610101600083815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080610101600083815260200190815260200160002060030181905550505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6040518060800160405280604f8152602001615049604f91398051906020012081805190602001206040518060400160405280600181526020017f31000000000000000000000000000000000000000000000000000000000000008152508051906020012030612d9f610e94565b60001b604051602001612db6959493929190613ff5565b6040516020818303038152906040528051906020012060978190555050565b612ddf83836127f0565b612dec6000848484612e30565b612e2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e2290614131565b60405180910390fd5b505050565b6000612e518473ffffffffffffffffffffffffffffffffffffffff16612d0e565b15612fba578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612e7a611b97565b8786866040518563ffffffff1660e01b8152600401612e9c9493929190613f51565b602060405180830381600087803b158015612eb657600080fd5b505af1925050508015612ee757506040513d601f19601f82011682018060405250810190612ee49190613765565b60015b612f6a573d8060008114612f17576040519150601f19603f3d011682016040523d82523d6000602084013e612f1c565b606091505b50600081511415612f62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f5990614131565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612fbf565b600190505b949350505050565b606060405180602001604052806000815250905090565b6060612fe8611869565b612ff1836130ac565b604051602001613002929190613e9d565b6040516020818303038152906040529050919050565b6000606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b606060008214156130f4576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050613254565b600082905060005b6000821461312657808061310f90614784565b915050600a8261311f91906145b9565b91506130fc565b60008167ffffffffffffffff811115613168577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561319a5781602001600182028036833780820191505090505b5090505b6000851461324d576001826131b391906145ea565b9150600a856131c291906147fb565b60306131ce9190614563565b60f81b81838151811061320a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561324691906145b9565b945061319e565b8093505050505b919050565b60405180608001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b8280546132a390614721565b90600052602060002090601f0160209004810192826132c5576000855561330c565b82601f106132de57805160ff191683800117855561330c565b8280016001018555821561330c579182015b8281111561330b5782518255916020019190600101906132f0565b5b509050613319919061331d565b5090565b5b8082111561333657600081600090555060010161331e565b5090565b600061334d6133488461447a565b614455565b90508281526020810184848401111561336557600080fd5b6133708482856146df565b509392505050565b600061338b613386846144ab565b614455565b9050828152602081018484840111156133a357600080fd5b6133ae8482856146df565b509392505050565b6000813590506133c581614f64565b92915050565b6000813590506133da81614f7b565b92915050565b6000813590506133ef81614f92565b92915050565b60008135905061340481614fa9565b92915050565b60008151905061341981614fa9565b92915050565b600082601f83011261343057600080fd5b813561344084826020860161333a565b91505092915050565b60008151905061345881614fc0565b92915050565b600082601f83011261346f57600080fd5b813561347f848260208601613378565b91505092915050565b60008135905061349781614fd7565b92915050565b6000813590506134ac81614fee565b92915050565b6000602082840312156134c457600080fd5b60006134d2848285016133b6565b91505092915050565b600080604083850312156134ee57600080fd5b60006134fc858286016133b6565b925050602061350d858286016133b6565b9150509250929050565b60008060006060848603121561352c57600080fd5b600061353a868287016133b6565b935050602061354b868287016133b6565b925050604061355c86828701613488565b9150509250925092565b6000806000806080858703121561357c57600080fd5b600061358a878288016133b6565b945050602061359b878288016133b6565b93505060406135ac87828801613488565b925050606085013567ffffffffffffffff8111156135c957600080fd5b6135d58782880161341f565b91505092959194509250565b600080604083850312156135f457600080fd5b6000613602858286016133b6565b9250506020613613858286016133cb565b9150509250929050565b600080600080600060a0868803121561363557600080fd5b6000613643888289016133b6565b955050602086013567ffffffffffffffff81111561366057600080fd5b61366c8882890161341f565b945050604061367d888289016133e0565b935050606061368e888289016133e0565b925050608061369f8882890161349d565b9150509295509295909350565b600080604083850312156136bf57600080fd5b60006136cd858286016133b6565b925050602083013567ffffffffffffffff8111156136ea57600080fd5b6136f68582860161345e565b9150509250929050565b6000806040838503121561371357600080fd5b6000613721858286016133b6565b925050602061373285828601613488565b9150509250929050565b60006020828403121561374e57600080fd5b600061375c848285016133f5565b91505092915050565b60006020828403121561377757600080fd5b60006137858482850161340a565b91505092915050565b6000602082840312156137a057600080fd5b60006137ae84828501613449565b91505092915050565b6000806000606084860312156137cc57600080fd5b600084013567ffffffffffffffff8111156137e657600080fd5b6137f28682870161345e565b935050602084013567ffffffffffffffff81111561380f57600080fd5b61381b8682870161345e565b925050604061382c868287016133b6565b9150509250925092565b60006020828403121561384857600080fd5b600061385684828501613488565b91505092915050565b6000806000806080858703121561387557600080fd5b600061388387828801613488565b9450506020613894878288016133b6565b93505060406138a587828801613488565b92505060606138b687828801613488565b91505092959194509250565b60006138ce8383613ddc565b60808301905092915050565b6138e381614630565b82525050565b6138f28161461e565b82525050565b6139018161461e565b82525050565b6139186139138261461e565b6147cd565b82525050565b6000613929826144ec565b613933818561451a565b935061393e836144dc565b8060005b8381101561396f57815161395688826138c2565b97506139618361450d565b925050600181019050613942565b5085935050505092915050565b61398581614642565b82525050565b6139948161464e565b82525050565b6139ab6139a68261464e565b6147df565b82525050565b60006139bc826144f7565b6139c6818561452b565b93506139d68185602086016146ee565b6139df816148e8565b840191505092915050565b60006139f5826144f7565b6139ff818561453c565b9350613a0f8185602086016146ee565b80840191505092915050565b613a24816146cd565b82525050565b6000613a3582614502565b613a3f8185614547565b9350613a4f8185602086016146ee565b613a58816148e8565b840191505092915050565b6000613a6e82614502565b613a788185614558565b9350613a888185602086016146ee565b80840191505092915050565b6000613aa1603283614547565b9150613aac82614906565b604082019050919050565b6000613ac4602683614547565b9150613acf82614955565b604082019050919050565b6000613ae7601c83614547565b9150613af2826149a4565b602082019050919050565b6000613b0a602583614547565b9150613b15826149cd565b604082019050919050565b6000613b2d601c83614547565b9150613b3882614a1c565b602082019050919050565b6000613b50600283614558565b9150613b5b82614a45565b600282019050919050565b6000613b73602483614547565b9150613b7e82614a6e565b604082019050919050565b6000613b96601983614547565b9150613ba182614abd565b602082019050919050565b6000613bb9602c83614547565b9150613bc482614ae6565b604082019050919050565b6000613bdc602583614547565b9150613be782614b35565b604082019050919050565b6000613bff603883614547565b9150613c0a82614b84565b604082019050919050565b6000613c22602a83614547565b9150613c2d82614bd3565b604082019050919050565b6000613c45602983614547565b9150613c5082614c22565b604082019050919050565b6000613c68602e83614547565b9150613c7382614c71565b604082019050919050565b6000613c8b602e83614547565b9150613c9682614cc0565b604082019050919050565b6000613cae602083614547565b9150613cb982614d0f565b602082019050919050565b6000613cd1603183614547565b9150613cdc82614d38565b604082019050919050565b6000613cf4602c83614547565b9150613cff82614d87565b604082019050919050565b6000613d17602083614547565b9150613d2282614dd6565b602082019050919050565b6000613d3a602183614547565b9150613d4582614dff565b604082019050919050565b6000613d5d602183614547565b9150613d6882614e4e565b604082019050919050565b6000613d80603183614547565b9150613d8b82614e9d565b604082019050919050565b6000613da3602b83614547565b9150613dae82614eec565b604082019050919050565b6000613dc6601583614547565b9150613dd182614f3b565b602082019050919050565b608082016000820151613df26000850182613e31565b506020820151613e056020850182613e31565b506040820151613e1860408501826138e9565b506060820151613e2b6060850182613e31565b50505050565b613e3a816146b6565b82525050565b613e49816146b6565b82525050565b613e58816146c0565b82525050565b6000613e6a82846139ea565b915081905092915050565b6000613e8182856139ea565b9150613e8d8284613907565b6014820191508190509392505050565b6000613ea98285613a63565b9150613eb58284613a63565b91508190509392505050565b6000613ecc82613b43565b9150613ed8828561399a565b602082019150613ee8828461399a565b6020820191508190509392505050565b6000602082019050613f0d60008301846138f8565b92915050565b6000606082019050613f2860008301866138f8565b613f3560208301856138da565b8181036040830152613f4781846139b1565b9050949350505050565b6000608082019050613f6660008301876138f8565b613f7360208301866138f8565b613f806040830185613e40565b8181036060830152613f9281846139b1565b905095945050505050565b60006020820190508181036000830152613fb7818461391e565b905092915050565b6000602082019050613fd4600083018461397c565b92915050565b6000602082019050613fef600083018461398b565b92915050565b600060a08201905061400a600083018861398b565b614017602083018761398b565b614024604083018661398b565b61403160608301856138f8565b61403e608083018461398b565b9695505050505050565b600060808201905061405d600083018761398b565b61406a6020830186613e40565b61407760408301856138f8565b614084606083018461398b565b95945050505050565b60006080820190506140a2600083018761398b565b6140af6020830186613e4f565b6140bc604083018561398b565b6140c9606083018461398b565b95945050505050565b600060208201905081810360008301526140ec81846139b1565b905092915050565b60006020820190506141096000830184613a1b565b92915050565b600060208201905081810360008301526141298184613a2a565b905092915050565b6000602082019050818103600083015261414a81613a94565b9050919050565b6000602082019050818103600083015261416a81613ab7565b9050919050565b6000602082019050818103600083015261418a81613ada565b9050919050565b600060208201905081810360008301526141aa81613afd565b9050919050565b600060208201905081810360008301526141ca81613b20565b9050919050565b600060208201905081810360008301526141ea81613b66565b9050919050565b6000602082019050818103600083015261420a81613b89565b9050919050565b6000602082019050818103600083015261422a81613bac565b9050919050565b6000602082019050818103600083015261424a81613bcf565b9050919050565b6000602082019050818103600083015261426a81613bf2565b9050919050565b6000602082019050818103600083015261428a81613c15565b9050919050565b600060208201905081810360008301526142aa81613c38565b9050919050565b600060208201905081810360008301526142ca81613c5b565b9050919050565b600060208201905081810360008301526142ea81613c7e565b9050919050565b6000602082019050818103600083015261430a81613ca1565b9050919050565b6000602082019050818103600083015261432a81613cc4565b9050919050565b6000602082019050818103600083015261434a81613ce7565b9050919050565b6000602082019050818103600083015261436a81613d0a565b9050919050565b6000602082019050818103600083015261438a81613d2d565b9050919050565b600060208201905081810360008301526143aa81613d50565b9050919050565b600060208201905081810360008301526143ca81613d73565b9050919050565b600060208201905081810360008301526143ea81613d96565b9050919050565b6000602082019050818103600083015261440a81613db9565b9050919050565b60006020820190506144266000830184613e40565b92915050565b60006040820190506144416000830185613e40565b61444e6020830184613e40565b9392505050565b600061445f614470565b905061446b8282614753565b919050565b6000604051905090565b600067ffffffffffffffff821115614495576144946148b9565b5b61449e826148e8565b9050602081019050919050565b600067ffffffffffffffff8211156144c6576144c56148b9565b5b6144cf826148e8565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061456e826146b6565b9150614579836146b6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156145ae576145ad61482c565b5b828201905092915050565b60006145c4826146b6565b91506145cf836146b6565b9250826145df576145de61485b565b5b828204905092915050565b60006145f5826146b6565b9150614600836146b6565b9250828210156146135761461261482c565b5b828203905092915050565b600061462982614696565b9050919050565b600061463b82614696565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061468f8261461e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006146d8826146c0565b9050919050565b82818337600083830152505050565b60005b8381101561470c5780820151818401526020810190506146f1565b8381111561471b576000848401525b50505050565b6000600282049050600182168061473957607f821691505b6020821081141561474d5761474c61488a565b5b50919050565b61475c826148e8565b810181811067ffffffffffffffff8211171561477b5761477a6148b9565b5b80604052505050565b600061478f826146b6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156147c2576147c161482c565b5b600182019050919050565b60006147d8826147e9565b9050919050565b6000819050919050565b60006147f4826148f9565b9050919050565b6000614806826146b6565b9150614811836146b6565b9250826148215761482061485b565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f46756e6374696f6e2063616c6c206e6f74207375636365737366756c00000000600082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4e61746976654d6574615472616e73616374696f6e3a20494e56414c49445f5360008201527f49474e4552000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f5369676e657220616e64207369676e617475726520646f206e6f74206d61746360008201527f6800000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f6e6f7420616c6c6f77656420746f207570646174650000000000000000000000600082015250565b614f6d8161461e565b8114614f7857600080fd5b50565b614f8481614642565b8114614f8f57600080fd5b50565b614f9b8161464e565b8114614fa657600080fd5b50565b614fb281614658565b8114614fbd57600080fd5b50565b614fc981614684565b8114614fd457600080fd5b50565b614fe0816146b6565b8114614feb57600080fd5b50565b614ff7816146c0565b811461500257600080fd5b5056fe4d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e617475726529454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c6164647265737320766572696679696e67436f6e74726163742c627974657333322073616c7429a2646970667358221220c1d2cecc27377f616b64efa6d74d4ed9a5e435212599f26f83d4650f3cc232fb64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101ee5760003560e01c806370a082311161010d578063b88d4fde116100a0578063d0def5211161006f578063d0def52114610705578063d547cfb714610742578063e985e9c51461076d578063f2fde38b146107aa578063f4881477146107d3576101ee565b8063b88d4fde1461064b578063c4d66de814610674578063c87b56dd1461069d578063cb7792a7146106da576101ee565b80638da5cb5b116100dc5780638da5cb5b146105a357806391df6c70146105ce57806395d89b41146105f7578063a22cb46514610622576101ee565b806370a08231146104e8578063715018a614610525578063755edd171461053c5780637f7b139314610565576101ee565b806320379ee511610185578063365ea84611610154578063365ea8461461042e57806342842e0e146104575780636352211e146104805780636738f234146104bd576101ee565b806320379ee51461037257806323b872dd1461039d5780632d0335ab146103c65780633408e47014610403576101ee565b80630c53c51c116101c15780630c53c51c146102c15780630f7e5970146102f157806317d70f7c1461031c57806318160ddd14610347576101ee565b806301ffc9a7146101f357806306fdde0314610230578063081812fc1461025b578063095ea7b314610298575b600080fd5b3480156101ff57600080fd5b5061021a6004803603810190610215919061373c565b6107fc565b6040516102279190613fbf565b60405180910390f35b34801561023c57600080fd5b506102456108de565b604051610252919061410f565b60405180910390f35b34801561026757600080fd5b50610282600480360381019061027d9190613836565b610970565b60405161028f9190613ef8565b60405180910390f35b3480156102a457600080fd5b506102bf60048036038101906102ba9190613700565b6109f5565b005b6102db60048036038101906102d6919061361d565b610b0d565b6040516102e891906140d2565b60405180910390f35b3480156102fd57600080fd5b50610306610d7f565b604051610313919061410f565b60405180910390f35b34801561032857600080fd5b50610331610db8565b60405161033e9190614411565b60405180910390f35b34801561035357600080fd5b5061035c610dc4565b6040516103699190614411565b60405180910390f35b34801561037e57600080fd5b50610387610de1565b6040516103949190613fda565b60405180910390f35b3480156103a957600080fd5b506103c460048036038101906103bf9190613517565b610deb565b005b3480156103d257600080fd5b506103ed60048036038101906103e891906134b2565b610e4b565b6040516103fa9190614411565b60405180910390f35b34801561040f57600080fd5b50610418610e94565b6040516104259190614411565b60405180910390f35b34801561043a57600080fd5b50610455600480360381019061045091906137b7565b610ea1565b005b34801561046357600080fd5b5061047e60048036038101906104799190613517565b610f96565b005b34801561048c57600080fd5b506104a760048036038101906104a29190613836565b610fb6565b6040516104b49190613ef8565b60405180910390f35b3480156104c957600080fd5b506104d2611068565b6040516104df9190613f9d565b60405180910390f35b3480156104f457600080fd5b5061050f600480360381019061050a91906134b2565b611206565b60405161051c9190614411565b60405180910390f35b34801561053157600080fd5b5061053a6112be565b005b34801561054857600080fd5b50610563600480360381019061055e91906134b2565b611346565b005b34801561057157600080fd5b5061058c60048036038101906105879190613836565b6113e8565b60405161059a92919061442c565b60405180910390f35b3480156105af57600080fd5b506105b8611496565b6040516105c59190613ef8565b60405180910390f35b3480156105da57600080fd5b506105f560048036038101906105f091906134b2565b6114c0565b005b34801561060357600080fd5b5061060c611581565b604051610619919061410f565b60405180910390f35b34801561062e57600080fd5b50610649600480360381019061064491906135e1565b611613565b005b34801561065757600080fd5b50610672600480360381019061066d9190613566565b611629565b005b34801561068057600080fd5b5061069b600480360381019061069691906134b2565b61168b565b005b3480156106a957600080fd5b506106c460048036038101906106bf9190613836565b61179d565b6040516106d1919061410f565b60405180910390f35b3480156106e657600080fd5b506106ef6117af565b6040516106fc9190613ef8565b60405180910390f35b34801561071157600080fd5b5061072c600480360381019061072791906136ac565b6117d6565b6040516107399190614411565b60405180910390f35b34801561074e57600080fd5b50610757611869565b604051610764919061410f565b60405180910390f35b34801561077957600080fd5b50610794600480360381019061078f91906134db565b6118a6565b6040516107a19190613fbf565b60405180910390f35b3480156107b657600080fd5b506107d160048036038101906107cc91906134b2565b6118ba565b005b3480156107df57600080fd5b506107fa60048036038101906107f5919061385f565b6119b2565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806108c757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806108d757506108d682611ac1565b5b9050919050565b6060606580546108ed90614721565b80601f016020809104026020016040519081016040528092919081815260200182805461091990614721565b80156109665780601f1061093b57610100808354040283529160200191610966565b820191906000526020600020905b81548152906001019060200180831161094957829003601f168201915b5050505050905090565b600061097b82611b2b565b6109ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b190614331565b60405180910390fd5b6069600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610a0082610fb6565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6890614391565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610a90611b97565b73ffffffffffffffffffffffffffffffffffffffff161480610abf5750610abe81610ab9611b97565b6118a6565b5b610afe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af590614251565b60405180910390fd5b610b088383611ba6565b505050565b606060006040518060600160405280609860008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481526020018873ffffffffffffffffffffffffffffffffffffffff168152602001878152509050610b908782878787611c5f565b610bcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc690614371565b60405180910390fd5b610c226001609860008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d6890919063ffffffff16565b609860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b873388604051610c9893929190613f13565b60405180910390a16000803073ffffffffffffffffffffffffffffffffffffffff16888a604051602001610ccd929190613e75565b604051602081830303815290604052604051610ce99190613e5e565b6000604051808303816000865af19150503d8060008114610d26576040519150601f19603f3d011682016040523d82523d6000602084013e610d2b565b606091505b509150915081610d70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6790614171565b60405180910390fd5b80935050505095945050505050565b6040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081565b60ff8060000154905081565b60006001610dd260cb611d7e565b610ddc91906145ea565b905090565b6000609754905090565b610dfc610df6611b97565b82611d8c565b610e3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e32906143b1565b60405180910390fd5b610e46838383611e6a565b505050565b6000609860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000804690508091505090565b6000610ead60016120d1565b90508015610ed1576001600060016101000a81548160ff0219169083151502179055505b610ed96121c1565b610ee38484612222565b8160cc60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610f2e60cb6122a3565b610f37846122b9565b8015610f905760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610f8791906140f4565b60405180910390a15b50505050565b610fb183838360405180602001604052806000815250611629565b505050565b6000806067600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561105f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105690614291565b60405180910390fd5b80915050919050565b60606000600161107860ff611d7e565b6110829190614563565b905060008167ffffffffffffffff8111156110c6577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156110ff57816020015b6110ec613259565b8152602001906001900390816110e45790505b50905060005b828110156111fd576000610101600083815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815250509050808383815181106111de577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052505080806111f590614784565b915050611105565b50809250505090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611277576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126e90614271565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6112c6611b97565b73ffffffffffffffffffffffffffffffffffffffff166112e4611496565b73ffffffffffffffffffffffffffffffffffffffff161461133a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133190614351565b60405180910390fd5b611344600061234f565b565b61134e611b97565b73ffffffffffffffffffffffffffffffffffffffff1661136c611496565b73ffffffffffffffffffffffffffffffffffffffff16146113c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b990614351565b60405180910390fd5b60006113ce60cb611d7e565b90506113da60cb6122a3565b6113e48282612415565b5050565b6000806000610101600085815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815250509050806000015181602001519250925050915091565b6000609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6114c8611b97565b73ffffffffffffffffffffffffffffffffffffffff166114e6611496565b73ffffffffffffffffffffffffffffffffffffffff161461153c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153390614351565b60405180910390fd5b8061010060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606066805461159090614721565b80601f01602080910402602001604051908101604052809291908181526020018280546115bc90614721565b80156116095780601f106115de57610100808354040283529160200191611609565b820191906000526020600020905b8154815290600101906020018083116115ec57829003601f168201915b5050505050905090565b61162561161e611b97565b8383612433565b5050565b61163a611634611b97565b83611d8c565b611679576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611670906143b1565b60405180910390fd5b611685848484846125a0565b50505050565b600061169760016120d1565b905080156116bb576001600060016101000a81548160ff0219169083151502179055505b6116c36125fc565b6116cb61264d565b6117406040518060400160405280600881526020017f53746172536869700000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f534849500000000000000000000000000000000000000000000000000000000081525084610ea1565b80156117995760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161179091906140f4565b60405180910390a15b5050565b60606117a88261269e565b9050919050565b61010060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061010060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461183357600080fd5b61183d60ff6122a3565b600061184960ff611d7e565b905061185584826127f0565b61185f81846129ca565b8091505092915050565b60606040518060400160405280600781526020017f697066733a2f2f00000000000000000000000000000000000000000000000000815250905090565b60006118b28383612a3e565b905092915050565b6118c2611b97565b73ffffffffffffffffffffffffffffffffffffffff166118e0611496565b73ffffffffffffffffffffffffffffffffffffffff1614611936576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192d90614351565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156119a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199d90614151565b60405180910390fd5b6119af8161234f565b50565b61010060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a0d57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff16611a2d85610fb6565b73ffffffffffffffffffffffffffffffffffffffff1614611a83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7a906143f1565b60405180910390fd5b816101016000868152602001908152602001600020600001819055508061010160008681526020019081526020016000206001018190555050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166067600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6000611ba1612b40565b905090565b816069600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611c1983610fb6565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415611cd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc790614231565b60405180910390fd5b6001611ce3611cde87612bf1565b612c59565b83868660405160008152602001604052604051611d03949392919061408d565b6020604051602081039080840390855afa158015611d25573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614905095945050505050565b60008183611d769190614563565b905092915050565b600081600001549050919050565b6000611d9782611b2b565b611dd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dcd90614211565b60405180910390fd5b6000611de183610fb6565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611e235750611e2281856118a6565b5b80611e6157508373ffffffffffffffffffffffffffffffffffffffff16611e4984610970565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611e8a82610fb6565b73ffffffffffffffffffffffffffffffffffffffff1614611ee0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed790614191565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f47906141d1565b60405180910390fd5b611f5b838383612c92565b611f66600082611ba6565b6001606860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611fb691906145ea565b925050819055506001606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461200d9190614563565b92505081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46120cc838383612c97565b505050565b60008060019054906101000a900460ff16156121485760018260ff1614801561210057506120fe30612d0e565b155b61213f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612136906142d1565b60405180910390fd5b600090506121bc565b8160ff1660008054906101000a900460ff1660ff161061219d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612194906142d1565b60405180910390fd5b816000806101000a81548160ff021916908360ff160217905550600190505b919050565b600060019054906101000a900460ff16612210576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612207906143d1565b60405180910390fd5b61222061221b611b97565b61234f565b565b600060019054906101000a900460ff16612271576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612268906143d1565b60405180910390fd5b8160659080519060200190612287929190613297565b50806066908051906020019061229e929190613297565b505050565b6001816000016000828254019250508190555050565b60006122c560016120d1565b905080156122e9576001600060016101000a81548160ff0219169083151502179055505b6122f282612d31565b801561234b5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161234291906140f4565b60405180910390a15b5050565b6000609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081609960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61242f828260405180602001604052806000815250612dd5565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156124a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612499906141f1565b60405180910390fd5b80606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516125939190613fbf565b60405180910390a3505050565b6125ab848484611e6a565b6125b784848484612e30565b6125f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125ed90614131565b60405180910390fd5b50505050565b600060019054906101000a900460ff1661264b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612642906143d1565b60405180910390fd5b565b600060019054906101000a900460ff1661269c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612693906143d1565b60405180910390fd5b565b60606126a982611b2b565b6126e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126df90614311565b60405180910390fd5b600060cd6000848152602001908152602001600020805461270890614721565b80601f016020809104026020016040519081016040528092919081815260200182805461273490614721565b80156127815780601f1061275657610100808354040283529160200191612781565b820191906000526020600020905b81548152906001019060200180831161276457829003601f168201915b505050505090506000612792612fc7565b90506000815114156127a85781925050506127eb565b6000825111156127dd5780826040516020016127c5929190613e9d565b604051602081830303815290604052925050506127eb565b6127e684612fde565b925050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612860576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612857906142f1565b60405180910390fd5b61286981611b2b565b156128a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128a0906141b1565b60405180910390fd5b6128b560008383612c92565b6001606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546129059190614563565b92505081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46129c660008383612c97565b5050565b6129d382611b2b565b612a12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a09906142b1565b60405180910390fd5b8060cd60008481526020019081526020016000209080519060200190612a39929190613297565b505050565b60008060cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663c4552791866040518263ffffffff1660e01b8152600401612ab69190613ef8565b60206040518083038186803b158015612ace57600080fd5b505afa158015612ae2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b06919061378e565b73ffffffffffffffffffffffffffffffffffffffff161415612b2c576001915050612b3a565b612b368484613018565b9150505b92915050565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415612bea57600080368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600080369050905073ffffffffffffffffffffffffffffffffffffffff818301511692505050612bee565b3390505b90565b6000604051806080016040528060438152602001615006604391398051906020012082600001518360200151846040015180519060200120604051602001612c3c9493929190614048565b604051602081830303815290604052805190602001209050919050565b6000612c63610de1565b82604051602001612c75929190613ec1565b604051602081830303815290604052805190602001209050919050565b505050565b81610101600083815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080610101600083815260200190815260200160002060030181905550505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6040518060800160405280604f8152602001615049604f91398051906020012081805190602001206040518060400160405280600181526020017f31000000000000000000000000000000000000000000000000000000000000008152508051906020012030612d9f610e94565b60001b604051602001612db6959493929190613ff5565b6040516020818303038152906040528051906020012060978190555050565b612ddf83836127f0565b612dec6000848484612e30565b612e2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e2290614131565b60405180910390fd5b505050565b6000612e518473ffffffffffffffffffffffffffffffffffffffff16612d0e565b15612fba578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612e7a611b97565b8786866040518563ffffffff1660e01b8152600401612e9c9493929190613f51565b602060405180830381600087803b158015612eb657600080fd5b505af1925050508015612ee757506040513d601f19601f82011682018060405250810190612ee49190613765565b60015b612f6a573d8060008114612f17576040519150601f19603f3d011682016040523d82523d6000602084013e612f1c565b606091505b50600081511415612f62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f5990614131565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612fbf565b600190505b949350505050565b606060405180602001604052806000815250905090565b6060612fe8611869565b612ff1836130ac565b604051602001613002929190613e9d565b6040516020818303038152906040529050919050565b6000606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b606060008214156130f4576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050613254565b600082905060005b6000821461312657808061310f90614784565b915050600a8261311f91906145b9565b91506130fc565b60008167ffffffffffffffff811115613168577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561319a5781602001600182028036833780820191505090505b5090505b6000851461324d576001826131b391906145ea565b9150600a856131c291906147fb565b60306131ce9190614563565b60f81b81838151811061320a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561324691906145b9565b945061319e565b8093505050505b919050565b60405180608001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b8280546132a390614721565b90600052602060002090601f0160209004810192826132c5576000855561330c565b82601f106132de57805160ff191683800117855561330c565b8280016001018555821561330c579182015b8281111561330b5782518255916020019190600101906132f0565b5b509050613319919061331d565b5090565b5b8082111561333657600081600090555060010161331e565b5090565b600061334d6133488461447a565b614455565b90508281526020810184848401111561336557600080fd5b6133708482856146df565b509392505050565b600061338b613386846144ab565b614455565b9050828152602081018484840111156133a357600080fd5b6133ae8482856146df565b509392505050565b6000813590506133c581614f64565b92915050565b6000813590506133da81614f7b565b92915050565b6000813590506133ef81614f92565b92915050565b60008135905061340481614fa9565b92915050565b60008151905061341981614fa9565b92915050565b600082601f83011261343057600080fd5b813561344084826020860161333a565b91505092915050565b60008151905061345881614fc0565b92915050565b600082601f83011261346f57600080fd5b813561347f848260208601613378565b91505092915050565b60008135905061349781614fd7565b92915050565b6000813590506134ac81614fee565b92915050565b6000602082840312156134c457600080fd5b60006134d2848285016133b6565b91505092915050565b600080604083850312156134ee57600080fd5b60006134fc858286016133b6565b925050602061350d858286016133b6565b9150509250929050565b60008060006060848603121561352c57600080fd5b600061353a868287016133b6565b935050602061354b868287016133b6565b925050604061355c86828701613488565b9150509250925092565b6000806000806080858703121561357c57600080fd5b600061358a878288016133b6565b945050602061359b878288016133b6565b93505060406135ac87828801613488565b925050606085013567ffffffffffffffff8111156135c957600080fd5b6135d58782880161341f565b91505092959194509250565b600080604083850312156135f457600080fd5b6000613602858286016133b6565b9250506020613613858286016133cb565b9150509250929050565b600080600080600060a0868803121561363557600080fd5b6000613643888289016133b6565b955050602086013567ffffffffffffffff81111561366057600080fd5b61366c8882890161341f565b945050604061367d888289016133e0565b935050606061368e888289016133e0565b925050608061369f8882890161349d565b9150509295509295909350565b600080604083850312156136bf57600080fd5b60006136cd858286016133b6565b925050602083013567ffffffffffffffff8111156136ea57600080fd5b6136f68582860161345e565b9150509250929050565b6000806040838503121561371357600080fd5b6000613721858286016133b6565b925050602061373285828601613488565b9150509250929050565b60006020828403121561374e57600080fd5b600061375c848285016133f5565b91505092915050565b60006020828403121561377757600080fd5b60006137858482850161340a565b91505092915050565b6000602082840312156137a057600080fd5b60006137ae84828501613449565b91505092915050565b6000806000606084860312156137cc57600080fd5b600084013567ffffffffffffffff8111156137e657600080fd5b6137f28682870161345e565b935050602084013567ffffffffffffffff81111561380f57600080fd5b61381b8682870161345e565b925050604061382c868287016133b6565b9150509250925092565b60006020828403121561384857600080fd5b600061385684828501613488565b91505092915050565b6000806000806080858703121561387557600080fd5b600061388387828801613488565b9450506020613894878288016133b6565b93505060406138a587828801613488565b92505060606138b687828801613488565b91505092959194509250565b60006138ce8383613ddc565b60808301905092915050565b6138e381614630565b82525050565b6138f28161461e565b82525050565b6139018161461e565b82525050565b6139186139138261461e565b6147cd565b82525050565b6000613929826144ec565b613933818561451a565b935061393e836144dc565b8060005b8381101561396f57815161395688826138c2565b97506139618361450d565b925050600181019050613942565b5085935050505092915050565b61398581614642565b82525050565b6139948161464e565b82525050565b6139ab6139a68261464e565b6147df565b82525050565b60006139bc826144f7565b6139c6818561452b565b93506139d68185602086016146ee565b6139df816148e8565b840191505092915050565b60006139f5826144f7565b6139ff818561453c565b9350613a0f8185602086016146ee565b80840191505092915050565b613a24816146cd565b82525050565b6000613a3582614502565b613a3f8185614547565b9350613a4f8185602086016146ee565b613a58816148e8565b840191505092915050565b6000613a6e82614502565b613a788185614558565b9350613a888185602086016146ee565b80840191505092915050565b6000613aa1603283614547565b9150613aac82614906565b604082019050919050565b6000613ac4602683614547565b9150613acf82614955565b604082019050919050565b6000613ae7601c83614547565b9150613af2826149a4565b602082019050919050565b6000613b0a602583614547565b9150613b15826149cd565b604082019050919050565b6000613b2d601c83614547565b9150613b3882614a1c565b602082019050919050565b6000613b50600283614558565b9150613b5b82614a45565b600282019050919050565b6000613b73602483614547565b9150613b7e82614a6e565b604082019050919050565b6000613b96601983614547565b9150613ba182614abd565b602082019050919050565b6000613bb9602c83614547565b9150613bc482614ae6565b604082019050919050565b6000613bdc602583614547565b9150613be782614b35565b604082019050919050565b6000613bff603883614547565b9150613c0a82614b84565b604082019050919050565b6000613c22602a83614547565b9150613c2d82614bd3565b604082019050919050565b6000613c45602983614547565b9150613c5082614c22565b604082019050919050565b6000613c68602e83614547565b9150613c7382614c71565b604082019050919050565b6000613c8b602e83614547565b9150613c9682614cc0565b604082019050919050565b6000613cae602083614547565b9150613cb982614d0f565b602082019050919050565b6000613cd1603183614547565b9150613cdc82614d38565b604082019050919050565b6000613cf4602c83614547565b9150613cff82614d87565b604082019050919050565b6000613d17602083614547565b9150613d2282614dd6565b602082019050919050565b6000613d3a602183614547565b9150613d4582614dff565b604082019050919050565b6000613d5d602183614547565b9150613d6882614e4e565b604082019050919050565b6000613d80603183614547565b9150613d8b82614e9d565b604082019050919050565b6000613da3602b83614547565b9150613dae82614eec565b604082019050919050565b6000613dc6601583614547565b9150613dd182614f3b565b602082019050919050565b608082016000820151613df26000850182613e31565b506020820151613e056020850182613e31565b506040820151613e1860408501826138e9565b506060820151613e2b6060850182613e31565b50505050565b613e3a816146b6565b82525050565b613e49816146b6565b82525050565b613e58816146c0565b82525050565b6000613e6a82846139ea565b915081905092915050565b6000613e8182856139ea565b9150613e8d8284613907565b6014820191508190509392505050565b6000613ea98285613a63565b9150613eb58284613a63565b91508190509392505050565b6000613ecc82613b43565b9150613ed8828561399a565b602082019150613ee8828461399a565b6020820191508190509392505050565b6000602082019050613f0d60008301846138f8565b92915050565b6000606082019050613f2860008301866138f8565b613f3560208301856138da565b8181036040830152613f4781846139b1565b9050949350505050565b6000608082019050613f6660008301876138f8565b613f7360208301866138f8565b613f806040830185613e40565b8181036060830152613f9281846139b1565b905095945050505050565b60006020820190508181036000830152613fb7818461391e565b905092915050565b6000602082019050613fd4600083018461397c565b92915050565b6000602082019050613fef600083018461398b565b92915050565b600060a08201905061400a600083018861398b565b614017602083018761398b565b614024604083018661398b565b61403160608301856138f8565b61403e608083018461398b565b9695505050505050565b600060808201905061405d600083018761398b565b61406a6020830186613e40565b61407760408301856138f8565b614084606083018461398b565b95945050505050565b60006080820190506140a2600083018761398b565b6140af6020830186613e4f565b6140bc604083018561398b565b6140c9606083018461398b565b95945050505050565b600060208201905081810360008301526140ec81846139b1565b905092915050565b60006020820190506141096000830184613a1b565b92915050565b600060208201905081810360008301526141298184613a2a565b905092915050565b6000602082019050818103600083015261414a81613a94565b9050919050565b6000602082019050818103600083015261416a81613ab7565b9050919050565b6000602082019050818103600083015261418a81613ada565b9050919050565b600060208201905081810360008301526141aa81613afd565b9050919050565b600060208201905081810360008301526141ca81613b20565b9050919050565b600060208201905081810360008301526141ea81613b66565b9050919050565b6000602082019050818103600083015261420a81613b89565b9050919050565b6000602082019050818103600083015261422a81613bac565b9050919050565b6000602082019050818103600083015261424a81613bcf565b9050919050565b6000602082019050818103600083015261426a81613bf2565b9050919050565b6000602082019050818103600083015261428a81613c15565b9050919050565b600060208201905081810360008301526142aa81613c38565b9050919050565b600060208201905081810360008301526142ca81613c5b565b9050919050565b600060208201905081810360008301526142ea81613c7e565b9050919050565b6000602082019050818103600083015261430a81613ca1565b9050919050565b6000602082019050818103600083015261432a81613cc4565b9050919050565b6000602082019050818103600083015261434a81613ce7565b9050919050565b6000602082019050818103600083015261436a81613d0a565b9050919050565b6000602082019050818103600083015261438a81613d2d565b9050919050565b600060208201905081810360008301526143aa81613d50565b9050919050565b600060208201905081810360008301526143ca81613d73565b9050919050565b600060208201905081810360008301526143ea81613d96565b9050919050565b6000602082019050818103600083015261440a81613db9565b9050919050565b60006020820190506144266000830184613e40565b92915050565b60006040820190506144416000830185613e40565b61444e6020830184613e40565b9392505050565b600061445f614470565b905061446b8282614753565b919050565b6000604051905090565b600067ffffffffffffffff821115614495576144946148b9565b5b61449e826148e8565b9050602081019050919050565b600067ffffffffffffffff8211156144c6576144c56148b9565b5b6144cf826148e8565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061456e826146b6565b9150614579836146b6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156145ae576145ad61482c565b5b828201905092915050565b60006145c4826146b6565b91506145cf836146b6565b9250826145df576145de61485b565b5b828204905092915050565b60006145f5826146b6565b9150614600836146b6565b9250828210156146135761461261482c565b5b828203905092915050565b600061462982614696565b9050919050565b600061463b82614696565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061468f8261461e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006146d8826146c0565b9050919050565b82818337600083830152505050565b60005b8381101561470c5780820151818401526020810190506146f1565b8381111561471b576000848401525b50505050565b6000600282049050600182168061473957607f821691505b6020821081141561474d5761474c61488a565b5b50919050565b61475c826148e8565b810181811067ffffffffffffffff8211171561477b5761477a6148b9565b5b80604052505050565b600061478f826146b6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156147c2576147c161482c565b5b600182019050919050565b60006147d8826147e9565b9050919050565b6000819050919050565b60006147f4826148f9565b9050919050565b6000614806826146b6565b9150614811836146b6565b9250826148215761482061485b565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f46756e6374696f6e2063616c6c206e6f74207375636365737366756c00000000600082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4e61746976654d6574615472616e73616374696f6e3a20494e56414c49445f5360008201527f49474e4552000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f5369676e657220616e64207369676e617475726520646f206e6f74206d61746360008201527f6800000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f6e6f7420616c6c6f77656420746f207570646174650000000000000000000000600082015250565b614f6d8161461e565b8114614f7857600080fd5b50565b614f8481614642565b8114614f8f57600080fd5b50565b614f9b8161464e565b8114614fa657600080fd5b50565b614fb281614658565b8114614fbd57600080fd5b50565b614fc981614684565b8114614fd457600080fd5b50565b614fe0816146b6565b8114614feb57600080fd5b50565b614ff7816146c0565b811461500257600080fd5b5056fe4d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e617475726529454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c6164647265737320766572696679696e67436f6e74726163742c627974657333322073616c7429a2646970667358221220c1d2cecc27377f616b64efa6d74d4ed9a5e435212599f26f83d4650f3cc232fb64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "mintTo(address)": {
        "details": "Mints a token to an address with a tokenURI.",
        "params": {
          "_to": "address of the future owner of the token"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "totalSupply()": {
        "details": "Returns the total tokens minted so far. 1 is always subtracted from the Counter since it tracks the next available tokenId."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getLocation(uint256)": {
        "notice": "gets the location of the ship"
      },
      "getShips()": {
        "notice": "Returns all ships in the game"
      },
      "mint(address,string)": {
        "notice": "mints a new nft ship"
      },
      "setLocation(uint256,address,uint256,uint256)": {
        "notice": "secure, only allow calls from PlayerContract. DONE"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/NFT.sol:Starship",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 133,
        "contract": "contracts/NFT.sol:Starship",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1808,
        "contract": "contracts/NFT.sol:Starship",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2129,
        "contract": "contracts/NFT.sol:Starship",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 353,
        "contract": "contracts/NFT.sol:Starship",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 355,
        "contract": "contracts/NFT.sol:Starship",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 359,
        "contract": "contracts/NFT.sol:Starship",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 363,
        "contract": "contracts/NFT.sol:Starship",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 367,
        "contract": "contracts/NFT.sol:Starship",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 373,
        "contract": "contracts/NFT.sol:Starship",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1214,
        "contract": "contracts/NFT.sol:Starship",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 5287,
        "contract": "contracts/NFT.sol:Starship",
        "label": "domainSeperator",
        "offset": 0,
        "slot": "151",
        "type": "t_bytes32"
      },
      {
        "astId": 5404,
        "contract": "contracts/NFT.sol:Starship",
        "label": "nonces",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10,
        "contract": "contracts/NFT.sol:Starship",
        "label": "_owner",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/NFT.sol:Starship",
        "label": "__gap",
        "offset": 0,
        "slot": "154",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3203,
        "contract": "contracts/NFT.sol:Starship",
        "label": "_nextTokenId",
        "offset": 0,
        "slot": "203",
        "type": "t_struct(Counter)1815_storage"
      },
      {
        "astId": 3205,
        "contract": "contracts/NFT.sol:Starship",
        "label": "proxyRegistryAddress",
        "offset": 0,
        "slot": "204",
        "type": "t_address"
      },
      {
        "astId": 1377,
        "contract": "contracts/NFT.sol:Starship",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1496,
        "contract": "contracts/NFT.sol:Starship",
        "label": "__gap",
        "offset": 0,
        "slot": "206",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3378,
        "contract": "contracts/NFT.sol:Starship",
        "label": "tokenId",
        "offset": 0,
        "slot": "255",
        "type": "t_struct(Counter)1815_storage"
      },
      {
        "astId": 3389,
        "contract": "contracts/NFT.sol:Starship",
        "label": "playerContract",
        "offset": 0,
        "slot": "256",
        "type": "t_address"
      },
      {
        "astId": 3394,
        "contract": "contracts/NFT.sol:Starship",
        "label": "shipData",
        "offset": 0,
        "slot": "257",
        "type": "t_mapping(t_uint256,t_struct(ShipData)3387_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(ShipData)3387_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Starship.ShipData)",
        "numberOfBytes": "32",
        "value": "t_struct(ShipData)3387_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1815_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 1814,
            "contract": "contracts/NFT.sol:Starship",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ShipData)3387_storage": {
        "encoding": "inplace",
        "label": "struct Starship.ShipData",
        "members": [
          {
            "astId": 3380,
            "contract": "contracts/NFT.sol:Starship",
            "label": "x",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3382,
            "contract": "contracts/NFT.sol:Starship",
            "label": "y",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3384,
            "contract": "contracts/NFT.sol:Starship",
            "label": "owner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 3386,
            "contract": "contracts/NFT.sol:Starship",
            "label": "id",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}