{
  "address": "0x8077b1B8562D0886e4A5E9e85aECc30f72e5d15b",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "planetType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PlanetConquer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stepsTaken",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "StepsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountFunded",
          "type": "uint256"
        }
      ],
      "name": "TreasuryFunded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AAVE_VAULT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BACKEND",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NFT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NFTPRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WORLD",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "indexStartingPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_planetId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_shipId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_worldId",
          "type": "uint256"
        }
      ],
      "name": "moveShip",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "playerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeJoined",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastQueried",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stepsAvailable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStepsTaken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountEarned",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "registerProfile",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setAaveVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setBackendAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftContractAddress",
          "type": "address"
        }
      ],
      "name": "setNftAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_worldAddress",
          "type": "address"
        }
      ],
      "name": "setWorldAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hashedMessageBackend",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_steps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastQueried",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "syncSteps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hashedMessageBackend",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_message",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastQueried",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "verifySteps",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb256940f32445fa09f96761ef503f8842f57a1c5beab1edd2f6943994f757b91",
  "receipt": {
    "to": null,
    "from": "0x8d3b5Bd6CeB7217c537411D976DB557f80E64487",
    "contractAddress": "0x8077b1B8562D0886e4A5E9e85aECc30f72e5d15b",
    "transactionIndex": 7,
    "gasUsed": "2344525",
    "logsBloom": "0x
    "blockHash": "0xf0877f4b26dab794dd88e973831e8f79525db642b9d6ee18f26b3338fd930454",
    "transactionHash": "0xb256940f32445fa09f96761ef503f8842f57a1c5beab1edd2f6943994f757b91",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 26904278,
        "transactionHash": "0xb256940f32445fa09f96761ef503f8842f57a1c5beab1edd2f6943994f757b91",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008d3b5bd6ceb7217c537411d976db557f80e64487",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000fa9ab3fb4c03c000000000000000000000000000000000000000000000000708f1135df08fee8000000000000000000000000000000000000000000000f4be2667d00a9783902000000000000000000000000000000000000000000000000707f678a9f543eac000000000000000000000000000000000000000000000f4be27626abe92cf93e",
        "logIndex": 15,
        "blockHash": "0xf0877f4b26dab794dd88e973831e8f79525db642b9d6ee18f26b3338fd930454"
      }
    ],
    "blockNumber": 26904278,
    "cumulativeGasUsed": "3518818",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6d824f0fd39aeb1a73164b872efbe39a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"planetType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PlanetConquer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stepsTaken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StepsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountFunded\",\"type\":\"uint256\"}],\"name\":\"TreasuryFunded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AAVE_VAULT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BACKEND\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFTPRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WORLD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"indexStartingPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_planetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shipId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_worldId\",\"type\":\"uint256\"}],\"name\":\"moveShip\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeJoined\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastQueried\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stepsAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStepsTaken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountEarned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"registerProfile\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAaveVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setBackendAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"}],\"name\":\"setNftAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_worldAddress\",\"type\":\"address\"}],\"name\":\"setWorldAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hashedMessageBackend\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_steps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastQueried\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"syncSteps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hashedMessageBackend\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_message\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastQueried\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"verifySteps\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"moveShip(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Move the ship to a new position {_planetId} the planet you want to reach {_shipId} the ship you are moving\"},\"registerProfile(string)\":{\"notice\":\"Creates the user profile of the user and mints a starship nft and forwards $$ to the treasury\"},\"setBackendAddress(address)\":{\"notice\":\"The address of our web2 backend. Messages from the backend which are verified in this contract\"},\"setNftAddress(address)\":{\"notice\":\"We set the Nft Contract\"},\"setWorldAddress(address)\":{\"notice\":\"We set the Worldcontract Contract\"},\"syncSteps(bytes32,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Sync the steps for the user\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Players.sol\":\"Players\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"contracts/Players.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./interfaces/IShip.sol\\\";\\nimport \\\"./interfaces/IWorld.sol\\\";\\nimport \\\"./interfaces/IHashVault.sol\\\";\\n\\n\\ncontract Players is Initializable, OwnableUpgradeable {\\n   using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    uint256 constant public NFTPRICE = 0.01 ether;\\n\\n    struct PersonProfile {\\n            uint256 playerId;\\n            uint256 timeJoined;\\n            uint256 lastQueried;\\n            uint256 stepsAvailable;\\n            uint256 totalStepsTaken;\\n            uint256 amountEarned;\\n    }\\n\\n    CountersUpgradeable.Counter indexPlayerIds;\\n    CountersUpgradeable.Counter public indexStartingPosition;\\n    address public BACKEND;\\n    address public NFT;\\n    address public WORLD;\\n    address public AAVE_VAULT;\\n\\n    mapping (address => PersonProfile) public players;\\n\\n    event TreasuryFunded(uint amountFunded);\\n\\n    event StepsAdded(uint stepsTaken, address player, uint timestamp);\\n\\n    event PlanetConquer(address indexed player, uint amount, uint planetType, uint timestamp); // TODO: add planetId\\n\\n\\n    function initialize() public initializer {\\n        __Ownable_init();\\n    }\\n\\n    /**\\n        The address of our web2 backend.\\n        Messages from the backend which are verified in this contract\\n     */\\n    function setBackendAddress(address _address) public onlyOwner {\\n        BACKEND = _address;\\n    }\\n\\n    /**\\n        We set the Nft Contract\\n     */\\n    function setNftAddress(address _nftContractAddress) public onlyOwner {\\n        NFT = _nftContractAddress;\\n    }\\n\\n    /**\\n        We set the Worldcontract Contract\\n     */\\n    function setWorldAddress(address _worldAddress) public onlyOwner {\\n        WORLD = _worldAddress;\\n    }\\n\\n    function setAaveVault(address _address) public onlyOwner {\\n        AAVE_VAULT = _address;\\n    }\\n\\n    /**\\n        Creates the user profile of the user and mints a starship nft\\n        and forwards $$ to the treasury\\n     */\\n    function registerProfile(string memory _tokenURI) public payable\\n     {\\n        _createProfile();\\n\\n        require(msg.value == NFTPRICE, \\\"Not enought/too much ether sent\\\");\\n\\n        // put coins to work in vault\\n        IHashVault(AAVE_VAULT).deposit{value: msg.value}();\\n\\n        // mint ship\\n        uint256 shipId = IShip(NFT).mint(msg.sender, _tokenURI);\\n        (uint startingX, uint startingY) = determineStartingPosition();\\n        IShip(NFT).setLocation(shipId, msg.sender, startingX, startingY);\\n    }\\n\\n    function _createProfile() private {\\n        PersonProfile storage player = players[msg.sender];\\n        require(player.playerId == 0, \\\"you already signed up\\\");\\n        indexPlayerIds.increment();\\n        player.playerId = indexPlayerIds.current();\\n        player.timeJoined = block.timestamp;\\n        // give the user 12 hour window, so that he does not sign up with zero steps\\n        player.lastQueried = block.timestamp - (60*60*12);\\n        player.stepsAvailable = 0;\\n        player.totalStepsTaken = 0;\\n        player.amountEarned = 0;\\n    }\\n\\n    /**\\n        Sync the steps for the user\\n    */\\n    function syncSteps(\\n        bytes32 _hashedMessageBackend,\\n        uint256 _steps,\\n        uint256 _lastQueried,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) public {\\n        // verify\\n        PersonProfile storage player = players[msg.sender];\\n        require(player.playerId != 0, \\\"you need to be registered\\\");\\n\\n        require(_lastQueried == player.lastQueried, \\\"last queried does not match\\\");\\n        verifySteps(_hashedMessageBackend, _steps, _lastQueried, _v, _r, _s);\\n\\n        // write\\n        player.totalStepsTaken += _steps;\\n        player.stepsAvailable += _steps;\\n        player.lastQueried = block.timestamp;\\n        emit StepsAdded(_steps, msg.sender, block.timestamp);\\n    }\\n\\n    function verifySteps(\\n        bytes32 _hashedMessageBackend,\\n        uint256 _message,\\n        uint256 _lastQueried,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) public view {\\n\\n        bytes32 hashedMessageSol = keccak256(abi.encode(_message, _lastQueried));\\n        require(hashedMessageSol == _hashedMessageBackend, \\\"payload was modified\\\");\\n\\n        bytes memory prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\n        bytes32 prefixedHashMessage = keccak256(abi.encodePacked(prefix, _hashedMessageBackend));\\n        address signer = ecrecover(prefixedHashMessage, _v, _r, _s);\\n\\n        require(signer == address(BACKEND), \\\"wrong signer\\\");\\n    }\\n\\n    /**\\n        Move the ship to a new position\\n        {_planetId} the planet you want to reach\\n        {_shipId} the ship you are moving\\n     */\\n    function moveShip(uint x, uint y, uint _planetId, uint _shipId, uint _worldId) public payable {\\n\\n        // current location of the ship\\n        (uint xCoordShip, uint yCoordShip) = IShip(NFT).getLocation(_shipId);\\n\\n        // calculate distance moved\\n        uint travelX = get_abs_diff(xCoordShip, x);\\n        uint travelY = get_abs_diff(yCoordShip, y);\\n        uint travelDistance = uint(sqrt((travelX * travelX) + (travelY * travelY)));\\n\\n        // check enough steps available\\n        require(players[msg.sender].stepsAvailable > travelDistance * 10, \\\"Not enough steps available to move there\\\");\\n\\n        // update steps of user\\n        players[msg.sender].stepsAvailable -= travelDistance * 10;\\n\\n        // update ship position\\n        IShip(NFT).setLocation(_shipId, msg.sender, x, y);\\n\\n        // check if we landed on a planet\\n        SharedStructs.Planet memory planet = IWorld(WORLD).getPlanet(_planetId);\\n\\n        if (x == planet.xCoord && y == planet.yCoord) {\\n            _payout(planet.planetType);\\n        }\\n    }\\n\\n    function _payout(uint planetType) internal {\\n        // route to vaults\\n        if (planetType == 1) {\\n            uint yield = IHashVault(AAVE_VAULT).yield();\\n\\n            if (yield > 0 && yield > 0.0000002 ether) { // did run into issues with the amount is too low\\n                IHashVault(AAVE_VAULT).withdraw(msg.sender);\\n                players[msg.sender].amountEarned += yield;\\n                emit PlanetConquer(msg.sender, yield, planetType, block.timestamp);\\n                return;\\n            }\\n        }\\n        emit PlanetConquer(msg.sender, 0, planetType, block.timestamp);\\n    }\\n\\n    function get_abs_diff(uint val1, uint val2) private pure returns (uint) {\\n        return val1 > val2 ? val1 - val2 : val2 - val1;\\n    }\\n\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    function determineStartingPosition() internal returns(uint x, uint y) {\\n\\n        indexStartingPosition.increment();\\n        uint positionIndex = indexStartingPosition.current();\\n\\n        uint startingX = positionIndex * 42;\\n        uint startingY = 16;\\n\\n        if (positionIndex == 46) {\\n            indexStartingPosition.reset();\\n        }\\n\\n        return (startingX, startingY);\\n    }\\n}\",\"keccak256\":\"0x56e1a62366200085811d7c9c287032500b4ff4b307a5d5256d6dd8531d27b5e4\",\"license\":\"Unlicense\"},\"contracts/interfaces/IHashVault.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IHashVault {\\n    function deposit() external payable;\\n    function withdraw(address _receiver) external;\\n    function yield() external view returns(uint);\\n}\",\"keccak256\":\"0x96087da2739f3ed4ae54113bab0c8cab7c752a02c3ae7bcb0081df9b86687431\",\"license\":\"Unlicense\"},\"contracts/interfaces/IShip.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IShip {\\n    /**\\n      gets the location of the ship\\n    */\\n    function getLocation(\\n        uint256 _tokenId\\n    ) external returns (uint x, uint y);\\n\\n    /**\\n      sets the location of the ship\\n    */\\n    function setLocation(\\n        uint256 _tokenId,\\n        address _ownerAddress,\\n        uint x,\\n        uint y\\n    ) external;\\n\\n    /**\\n      mints a new nft ship\\n     */\\n    function mint(address player, string memory _tokenURI) external returns (uint256);\\n}\",\"keccak256\":\"0x4fb97e54481f310d6f394929fa78af8569e24efa80ded5d4e4dcd78d7206b244\",\"license\":\"Unlicense\"},\"contracts/interfaces/IWorld.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../structs/shared.sol\\\";\\n\\ninterface IWorld {\\n\\n    /**\\n      gets a planet\\n    */\\n    function getPlanet(uint _planetId) external view returns (SharedStructs.Planet memory);\\n}\",\"keccak256\":\"0x52205885fb2ff4e90bc59da1fa66202da179f1b9fbd7816b61ee0a738e4537c4\",\"license\":\"Unlicense\"},\"contracts/structs/shared.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary SharedStructs {\\n        // Define planet information\\n    struct Planet {\\n        uint planetID; // an ID that is unique across all world maps\\n        uint worldMapIndex; // which world map does this planet belong to\\n        uint xCoord; // x-axis coordinate in respective world map\\n        uint yCoord; // y-axis coordinate in respective world map\\n        uint planetType;\\n        uint balance; // The total value of tokens inside the planet\\n    }\\n}\",\"keccak256\":\"0xba5ad34f009c3b308f299dd2dc1ebeb55db9bd50af94a1831fef596997552809\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506129a0806100206000396000f3fe6080604052600436106101145760003560e01c80637912680d116100a0578063ba16971611610064578063ba16971614610332578063e2eb41ff1461035b578063e839665c1461039d578063f2fde38b146103b9578063f6af3431146103e257610114565b80637912680d146102715780637c0b8de21461029a5780638129fc1c146102c55780638da5cb5b146102dc578063b93d28ee1461030757610114565b8063240bcbfa116100e7578063240bcbfa146101bf57806339e7a708146101e85780633b72498a146102135780633fc909201461023e578063715018a61461025a57610114565b80630b102d1a146101195780631815ce7d146101425780631822b8471461016b5780631ee93ff014610194575b600080fd5b34801561012557600080fd5b50610140600480360381019061013b9190611b6e565b61040d565b005b34801561014e57600080fd5b5061016960048036038101906101649190611b6e565b6104cd565b005b34801561017757600080fd5b50610192600480360381019061018d9190611b97565b61058d565b005b3480156101a057600080fd5b506101a9610752565b6040516101b69190611fea565b60405180910390f35b3480156101cb57600080fd5b506101e660048036038101906101e19190611b97565b610778565b005b3480156101f457600080fd5b506101fd6108da565b60405161020a9190611fea565b60405180910390f35b34801561021f57600080fd5b50610228610900565b604051610235919061222c565b60405180910390f35b61025860048036038101906102539190611c20565b61090c565b005b34801561026657600080fd5b5061026f610b3b565b005b34801561027d57600080fd5b5061029860048036038101906102939190611b6e565b610bc3565b005b3480156102a657600080fd5b506102af610c83565b6040516102bc9190611fea565b60405180910390f35b3480156102d157600080fd5b506102da610ca9565b005b3480156102e857600080fd5b506102f1610d3d565b6040516102fe9190611fea565b60405180910390f35b34801561031357600080fd5b5061031c610d67565b604051610329919061222c565b60405180910390f35b34801561033e57600080fd5b5061035960048036038101906103549190611b6e565b610d72565b005b34801561036757600080fd5b50610382600480360381019061037d9190611b6e565b610e32565b60405161039496959493929190612323565b60405180910390f35b6103b760048036038101906103b29190611cef565b610e6e565b005b3480156103c557600080fd5b506103e060048036038101906103db9190611b6e565b6111d8565b005b3480156103ee57600080fd5b506103f76112d0565b6040516104049190611fea565b60405180910390f35b6104156112f6565b73ffffffffffffffffffffffffffffffffffffffff16610433610d3d565b73ffffffffffffffffffffffffffffffffffffffff1614610489576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610480906121cc565b60405180910390fd5b80606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6104d56112f6565b73ffffffffffffffffffffffffffffffffffffffff166104f3610d3d565b73ffffffffffffffffffffffffffffffffffffffff1614610549576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610540906121cc565b60405180910390fd5b80606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600085856040516020016105a29291906122c3565b6040516020818303038152906040528051906020012090508681146105fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f39061210c565b60405180910390fd5b60006040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a33320000000081525090506000818960405160200161064b929190611fc2565b6040516020818303038152906040528051906020012090506000600182888888604051600081526020016040526040516106889493929190612035565b6020604051602081039080840390855afa1580156106aa573d6000803e3d6000fd5b505050602060405103519050606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610746576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073d906120cc565b60405180910390fd5b50505050505050505050565b606a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000606b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001541415610803576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fa906121ec565b60405180910390fd5b80600201548514610849576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610840906121ac565b60405180910390fd5b61085787878787878761058d565b8581600401600082825461086b919061240c565b9250508190555085816003016000828254610886919061240c565b925050819055504281600201819055507fea53fca5456139f39e787af7250a4c0571c46facc363f3083ec3fa7a0d65888e8633426040516108c993929190612247565b60405180910390a150505050505050565b606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60668060000154905081565b6109146112fe565b662386f26fc10000341461095d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109549061214c565b60405180910390fd5b606a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156109c757600080fd5b505af11580156109db573d6000803e3d6000fd5b50505050506000606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0def52133846040518363ffffffff1660e01b8152600401610a3f929190612005565b602060405180830381600087803b158015610a5957600080fd5b505af1158015610a6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a919190611c8a565b9050600080610a9e6113e4565b91509150606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f4881477843385856040518563ffffffff1660e01b8152600401610b03949392919061227e565b600060405180830381600087803b158015610b1d57600080fd5b505af1158015610b31573d6000803e3d6000fd5b5050505050505050565b610b436112f6565b73ffffffffffffffffffffffffffffffffffffffff16610b61610d3d565b73ffffffffffffffffffffffffffffffffffffffff1614610bb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bae906121cc565b60405180910390fd5b610bc16000611437565b565b610bcb6112f6565b73ffffffffffffffffffffffffffffffffffffffff16610be9610d3d565b73ffffffffffffffffffffffffffffffffffffffff1614610c3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c36906121cc565b60405180910390fd5b80606960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610cb560016114fd565b90508015610cd9576001600060016101000a81548160ff0219169083151502179055505b610ce16115ed565b8015610d3a5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610d3191906120b1565b60405180910390a15b50565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b662386f26fc1000081565b610d7a6112f6565b73ffffffffffffffffffffffffffffffffffffffff16610d98610d3d565b73ffffffffffffffffffffffffffffffffffffffff1614610dee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de5906121cc565b60405180910390fd5b80606a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606b6020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154908060050154905086565b600080606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f7b1393856040518263ffffffff1660e01b8152600401610ecc919061222c565b6040805180830381600087803b158015610ee557600080fd5b505af1158015610ef9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1d9190611cb3565b915091506000610f2d8389611646565b90506000610f3b8389611646565b90506000610f698283610f4e9190612493565b8485610f5a9190612493565b610f64919061240c565b611675565b9050600a81610f789190612493565b606b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015411610ffb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff29061212c565b60405180910390fd5b600a816110089190612493565b606b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600082825461105991906124ed565b92505081905550606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f488147788338d8d6040518563ffffffff1660e01b81526004016110c1949392919061227e565b600060405180830381600087803b1580156110db57600080fd5b505af11580156110ef573d6000803e3d6000fd5b505050506000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334efcb8e8a6040518263ffffffff1660e01b8152600401611150919061222c565b60c06040518083038186803b15801561116857600080fd5b505afa15801561117c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a09190611c61565b905080604001518b1480156111b8575080606001518a145b156111cb576111ca81608001516116ef565b5b5050505050505050505050565b6111e06112f6565b73ffffffffffffffffffffffffffffffffffffffff166111fe610d3d565b73ffffffffffffffffffffffffffffffffffffffff1614611254576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124b906121cc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156112c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112bb906120ec565b60405180910390fd5b6112cd81611437565b50565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b6000606b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015414611388576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137f9061216c565b60405180910390fd5b611392606561194c565b61139c6065611962565b816000018190555042816001018190555061a8c0426113bb91906124ed565b816002018190555060008160030181905550600081600401819055506000816005018190555050565b6000806113f1606661194c565b60006113fd6066611962565b90506000602a8261140e9190612493565b9050600060109050602e83141561142a576114296066611970565b5b8181945094505050509091565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008060019054906101000a900460ff16156115745760018260ff1614801561152c575061152a3061197d565b155b61156b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115629061218c565b60405180910390fd5b600090506115e8565b8160ff1660008054906101000a900460ff1660ff16106115c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c09061218c565b60405180910390fd5b816000806101000a81548160ff021916908360ff160217905550600190505b919050565b600060019054906101000a900460ff1661163c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116339061220c565b60405180910390fd5b6116446119a0565b565b600081831161166057828261165b91906124ed565b61166d565b818361166c91906124ed565b5b905092915050565b600060038211156116dc57819050600060016002846116949190612462565b61169e919061240c565b90505b818110156116d65780915060028182856116bb9190612462565b6116c5919061240c565b6116cf9190612462565b90506116a1565b506116ea565b600082146116e957600190505b5b919050565b60018114156118f5576000606a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663285939846040518163ffffffff1660e01b815260040160206040518083038186803b15801561176257600080fd5b505afa158015611776573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179a9190611c8a565b90506000811180156117b05750642e90edd00081115b156118f357606a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351cff8d9336040518263ffffffff1660e01b81526004016118109190611fea565b600060405180830381600087803b15801561182a57600080fd5b505af115801561183e573d6000803e3d6000fd5b5050505080606b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005016000828254611894919061240c565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fe43355d49b9fa992e8c84178c0dc4a935d068936a4690cc3262dd36a393fa0de8284426040516118e5939291906122ec565b60405180910390a250611949565b505b3373ffffffffffffffffffffffffffffffffffffffff167fe43355d49b9fa992e8c84178c0dc4a935d068936a4690cc3262dd36a393fa0de600083426040516119409392919061207a565b60405180910390a25b50565b6001816000016000828254019250508190555050565b600081600001549050919050565b6000816000018190555050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff166119ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119e69061220c565b60405180910390fd5b6119ff6119fa6112f6565b611437565b565b6000611a14611a0f846123a9565b612384565b905082815260208101848484011115611a2c57600080fd5b611a37848285612598565b509392505050565b600081359050611a4e8161290e565b92915050565b600081359050611a6381612925565b92915050565b600082601f830112611a7a57600080fd5b8135611a8a848260208601611a01565b91505092915050565b600060c08284031215611aa557600080fd5b611aaf60c0612384565b90506000611abf84828501611b44565b6000830152506020611ad384828501611b44565b6020830152506040611ae784828501611b44565b6040830152506060611afb84828501611b44565b6060830152506080611b0f84828501611b44565b60808301525060a0611b2384828501611b44565b60a08301525092915050565b600081359050611b3e8161293c565b92915050565b600081519050611b538161293c565b92915050565b600081359050611b6881612953565b92915050565b600060208284031215611b8057600080fd5b6000611b8e84828501611a3f565b91505092915050565b60008060008060008060c08789031215611bb057600080fd5b6000611bbe89828a01611a54565b9650506020611bcf89828a01611b2f565b9550506040611be089828a01611b2f565b9450506060611bf189828a01611b59565b9350506080611c0289828a01611a54565b92505060a0611c1389828a01611a54565b9150509295509295509295565b600060208284031215611c3257600080fd5b600082013567ffffffffffffffff811115611c4c57600080fd5b611c5884828501611a69565b91505092915050565b600060c08284031215611c7357600080fd5b6000611c8184828501611a93565b91505092915050565b600060208284031215611c9c57600080fd5b6000611caa84828501611b44565b91505092915050565b60008060408385031215611cc657600080fd5b6000611cd485828601611b44565b9250506020611ce585828601611b44565b9150509250929050565b600080600080600060a08688031215611d0757600080fd5b6000611d1588828901611b2f565b9550506020611d2688828901611b2f565b9450506040611d3788828901611b2f565b9350506060611d4888828901611b2f565b9250506080611d5988828901611b2f565b9150509295509295909350565b611d6f81612521565b82525050565b611d7e81612533565b82525050565b611d95611d9082612533565b61260b565b82525050565b6000611da6826123da565b611db081856123f0565b9350611dc08185602086016125a7565b80840191505092915050565b611dd581612574565b82525050565b611de481612586565b82525050565b6000611df5826123e5565b611dff81856123fb565b9350611e0f8185602086016125a7565b611e18816126a2565b840191505092915050565b6000611e30600c836123fb565b9150611e3b826126b3565b602082019050919050565b6000611e536026836123fb565b9150611e5e826126dc565b604082019050919050565b6000611e766014836123fb565b9150611e818261272b565b602082019050919050565b6000611e996028836123fb565b9150611ea482612754565b604082019050919050565b6000611ebc601f836123fb565b9150611ec7826127a3565b602082019050919050565b6000611edf6015836123fb565b9150611eea826127cc565b602082019050919050565b6000611f02602e836123fb565b9150611f0d826127f5565b604082019050919050565b6000611f25601b836123fb565b9150611f3082612844565b602082019050919050565b6000611f486020836123fb565b9150611f538261286d565b602082019050919050565b6000611f6b6019836123fb565b9150611f7682612896565b602082019050919050565b6000611f8e602b836123fb565b9150611f99826128bf565b604082019050919050565b611fad8161255d565b82525050565b611fbc81612567565b82525050565b6000611fce8285611d9b565b9150611fda8284611d84565b6020820191508190509392505050565b6000602082019050611fff6000830184611d66565b92915050565b600060408201905061201a6000830185611d66565b818103602083015261202c8184611dea565b90509392505050565b600060808201905061204a6000830187611d75565b6120576020830186611fb3565b6120646040830185611d75565b6120716060830184611d75565b95945050505050565b600060608201905061208f6000830186611dcc565b61209c6020830185611fa4565b6120a96040830184611fa4565b949350505050565b60006020820190506120c66000830184611ddb565b92915050565b600060208201905081810360008301526120e581611e23565b9050919050565b6000602082019050818103600083015261210581611e46565b9050919050565b6000602082019050818103600083015261212581611e69565b9050919050565b6000602082019050818103600083015261214581611e8c565b9050919050565b6000602082019050818103600083015261216581611eaf565b9050919050565b6000602082019050818103600083015261218581611ed2565b9050919050565b600060208201905081810360008301526121a581611ef5565b9050919050565b600060208201905081810360008301526121c581611f18565b9050919050565b600060208201905081810360008301526121e581611f3b565b9050919050565b6000602082019050818103600083015261220581611f5e565b9050919050565b6000602082019050818103600083015261222581611f81565b9050919050565b60006020820190506122416000830184611fa4565b92915050565b600060608201905061225c6000830186611fa4565b6122696020830185611d66565b6122766040830184611fa4565b949350505050565b60006080820190506122936000830187611fa4565b6122a06020830186611d66565b6122ad6040830185611fa4565b6122ba6060830184611fa4565b95945050505050565b60006040820190506122d86000830185611fa4565b6122e56020830184611fa4565b9392505050565b60006060820190506123016000830186611fa4565b61230e6020830185611fa4565b61231b6040830184611fa4565b949350505050565b600060c0820190506123386000830189611fa4565b6123456020830188611fa4565b6123526040830187611fa4565b61235f6060830186611fa4565b61236c6080830185611fa4565b61237960a0830184611fa4565b979650505050505050565b600061238e61239f565b905061239a82826125da565b919050565b6000604051905090565b600067ffffffffffffffff8211156123c4576123c3612673565b5b6123cd826126a2565b9050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006124178261255d565b91506124228361255d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561245757612456612615565b5b828201905092915050565b600061246d8261255d565b91506124788361255d565b92508261248857612487612644565b5b828204905092915050565b600061249e8261255d565b91506124a98361255d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156124e2576124e1612615565b5b828202905092915050565b60006124f88261255d565b91506125038361255d565b92508282101561251657612515612615565b5b828203905092915050565b600061252c8261253d565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061257f8261255d565b9050919050565b600061259182612567565b9050919050565b82818337600083830152505050565b60005b838110156125c55780820151818401526020810190506125aa565b838111156125d4576000848401525b50505050565b6125e3826126a2565b810181811067ffffffffffffffff8211171561260257612601612673565b5b80604052505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f77726f6e67207369676e65720000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f7061796c6f616420776173206d6f646966696564000000000000000000000000600082015250565b7f4e6f7420656e6f75676820737465707320617661696c61626c6520746f206d6f60008201527f7665207468657265000000000000000000000000000000000000000000000000602082015250565b7f4e6f7420656e6f756768742f746f6f206d7563682065746865722073656e7400600082015250565b7f796f7520616c7265616479207369676e65642075700000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f6c617374207175657269656420646f6573206e6f74206d617463680000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f796f75206e65656420746f206265207265676973746572656400000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b61291781612521565b811461292257600080fd5b50565b61292e81612533565b811461293957600080fd5b50565b6129458161255d565b811461295057600080fd5b50565b61295c81612567565b811461296757600080fd5b5056fea26469706673582212200eca451ee87adeb556978c4198e6c12611ff68221bac4b6c74f1abeb2c7ef6c264736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101145760003560e01c80637912680d116100a0578063ba16971611610064578063ba16971614610332578063e2eb41ff1461035b578063e839665c1461039d578063f2fde38b146103b9578063f6af3431146103e257610114565b80637912680d146102715780637c0b8de21461029a5780638129fc1c146102c55780638da5cb5b146102dc578063b93d28ee1461030757610114565b8063240bcbfa116100e7578063240bcbfa146101bf57806339e7a708146101e85780633b72498a146102135780633fc909201461023e578063715018a61461025a57610114565b80630b102d1a146101195780631815ce7d146101425780631822b8471461016b5780631ee93ff014610194575b600080fd5b34801561012557600080fd5b50610140600480360381019061013b9190611b6e565b61040d565b005b34801561014e57600080fd5b5061016960048036038101906101649190611b6e565b6104cd565b005b34801561017757600080fd5b50610192600480360381019061018d9190611b97565b61058d565b005b3480156101a057600080fd5b506101a9610752565b6040516101b69190611fea565b60405180910390f35b3480156101cb57600080fd5b506101e660048036038101906101e19190611b97565b610778565b005b3480156101f457600080fd5b506101fd6108da565b60405161020a9190611fea565b60405180910390f35b34801561021f57600080fd5b50610228610900565b604051610235919061222c565b60405180910390f35b61025860048036038101906102539190611c20565b61090c565b005b34801561026657600080fd5b5061026f610b3b565b005b34801561027d57600080fd5b5061029860048036038101906102939190611b6e565b610bc3565b005b3480156102a657600080fd5b506102af610c83565b6040516102bc9190611fea565b60405180910390f35b3480156102d157600080fd5b506102da610ca9565b005b3480156102e857600080fd5b506102f1610d3d565b6040516102fe9190611fea565b60405180910390f35b34801561031357600080fd5b5061031c610d67565b604051610329919061222c565b60405180910390f35b34801561033e57600080fd5b5061035960048036038101906103549190611b6e565b610d72565b005b34801561036757600080fd5b50610382600480360381019061037d9190611b6e565b610e32565b60405161039496959493929190612323565b60405180910390f35b6103b760048036038101906103b29190611cef565b610e6e565b005b3480156103c557600080fd5b506103e060048036038101906103db9190611b6e565b6111d8565b005b3480156103ee57600080fd5b506103f76112d0565b6040516104049190611fea565b60405180910390f35b6104156112f6565b73ffffffffffffffffffffffffffffffffffffffff16610433610d3d565b73ffffffffffffffffffffffffffffffffffffffff1614610489576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610480906121cc565b60405180910390fd5b80606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6104d56112f6565b73ffffffffffffffffffffffffffffffffffffffff166104f3610d3d565b73ffffffffffffffffffffffffffffffffffffffff1614610549576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610540906121cc565b60405180910390fd5b80606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600085856040516020016105a29291906122c3565b6040516020818303038152906040528051906020012090508681146105fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f39061210c565b60405180910390fd5b60006040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a33320000000081525090506000818960405160200161064b929190611fc2565b6040516020818303038152906040528051906020012090506000600182888888604051600081526020016040526040516106889493929190612035565b6020604051602081039080840390855afa1580156106aa573d6000803e3d6000fd5b505050602060405103519050606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610746576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073d906120cc565b60405180910390fd5b50505050505050505050565b606a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000606b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001541415610803576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fa906121ec565b60405180910390fd5b80600201548514610849576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610840906121ac565b60405180910390fd5b61085787878787878761058d565b8581600401600082825461086b919061240c565b9250508190555085816003016000828254610886919061240c565b925050819055504281600201819055507fea53fca5456139f39e787af7250a4c0571c46facc363f3083ec3fa7a0d65888e8633426040516108c993929190612247565b60405180910390a150505050505050565b606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60668060000154905081565b6109146112fe565b662386f26fc10000341461095d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109549061214c565b60405180910390fd5b606a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156109c757600080fd5b505af11580156109db573d6000803e3d6000fd5b50505050506000606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0def52133846040518363ffffffff1660e01b8152600401610a3f929190612005565b602060405180830381600087803b158015610a5957600080fd5b505af1158015610a6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a919190611c8a565b9050600080610a9e6113e4565b91509150606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f4881477843385856040518563ffffffff1660e01b8152600401610b03949392919061227e565b600060405180830381600087803b158015610b1d57600080fd5b505af1158015610b31573d6000803e3d6000fd5b5050505050505050565b610b436112f6565b73ffffffffffffffffffffffffffffffffffffffff16610b61610d3d565b73ffffffffffffffffffffffffffffffffffffffff1614610bb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bae906121cc565b60405180910390fd5b610bc16000611437565b565b610bcb6112f6565b73ffffffffffffffffffffffffffffffffffffffff16610be9610d3d565b73ffffffffffffffffffffffffffffffffffffffff1614610c3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c36906121cc565b60405180910390fd5b80606960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610cb560016114fd565b90508015610cd9576001600060016101000a81548160ff0219169083151502179055505b610ce16115ed565b8015610d3a5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610d3191906120b1565b60405180910390a15b50565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b662386f26fc1000081565b610d7a6112f6565b73ffffffffffffffffffffffffffffffffffffffff16610d98610d3d565b73ffffffffffffffffffffffffffffffffffffffff1614610dee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de5906121cc565b60405180910390fd5b80606a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606b6020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154908060050154905086565b600080606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f7b1393856040518263ffffffff1660e01b8152600401610ecc919061222c565b6040805180830381600087803b158015610ee557600080fd5b505af1158015610ef9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1d9190611cb3565b915091506000610f2d8389611646565b90506000610f3b8389611646565b90506000610f698283610f4e9190612493565b8485610f5a9190612493565b610f64919061240c565b611675565b9050600a81610f789190612493565b606b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015411610ffb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff29061212c565b60405180910390fd5b600a816110089190612493565b606b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600082825461105991906124ed565b92505081905550606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f488147788338d8d6040518563ffffffff1660e01b81526004016110c1949392919061227e565b600060405180830381600087803b1580156110db57600080fd5b505af11580156110ef573d6000803e3d6000fd5b505050506000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334efcb8e8a6040518263ffffffff1660e01b8152600401611150919061222c565b60c06040518083038186803b15801561116857600080fd5b505afa15801561117c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a09190611c61565b905080604001518b1480156111b8575080606001518a145b156111cb576111ca81608001516116ef565b5b5050505050505050505050565b6111e06112f6565b73ffffffffffffffffffffffffffffffffffffffff166111fe610d3d565b73ffffffffffffffffffffffffffffffffffffffff1614611254576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124b906121cc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156112c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112bb906120ec565b60405180910390fd5b6112cd81611437565b50565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b6000606b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015414611388576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137f9061216c565b60405180910390fd5b611392606561194c565b61139c6065611962565b816000018190555042816001018190555061a8c0426113bb91906124ed565b816002018190555060008160030181905550600081600401819055506000816005018190555050565b6000806113f1606661194c565b60006113fd6066611962565b90506000602a8261140e9190612493565b9050600060109050602e83141561142a576114296066611970565b5b8181945094505050509091565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008060019054906101000a900460ff16156115745760018260ff1614801561152c575061152a3061197d565b155b61156b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115629061218c565b60405180910390fd5b600090506115e8565b8160ff1660008054906101000a900460ff1660ff16106115c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c09061218c565b60405180910390fd5b816000806101000a81548160ff021916908360ff160217905550600190505b919050565b600060019054906101000a900460ff1661163c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116339061220c565b60405180910390fd5b6116446119a0565b565b600081831161166057828261165b91906124ed565b61166d565b818361166c91906124ed565b5b905092915050565b600060038211156116dc57819050600060016002846116949190612462565b61169e919061240c565b90505b818110156116d65780915060028182856116bb9190612462565b6116c5919061240c565b6116cf9190612462565b90506116a1565b506116ea565b600082146116e957600190505b5b919050565b60018114156118f5576000606a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663285939846040518163ffffffff1660e01b815260040160206040518083038186803b15801561176257600080fd5b505afa158015611776573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179a9190611c8a565b90506000811180156117b05750642e90edd00081115b156118f357606a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351cff8d9336040518263ffffffff1660e01b81526004016118109190611fea565b600060405180830381600087803b15801561182a57600080fd5b505af115801561183e573d6000803e3d6000fd5b5050505080606b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005016000828254611894919061240c565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fe43355d49b9fa992e8c84178c0dc4a935d068936a4690cc3262dd36a393fa0de8284426040516118e5939291906122ec565b60405180910390a250611949565b505b3373ffffffffffffffffffffffffffffffffffffffff167fe43355d49b9fa992e8c84178c0dc4a935d068936a4690cc3262dd36a393fa0de600083426040516119409392919061207a565b60405180910390a25b50565b6001816000016000828254019250508190555050565b600081600001549050919050565b6000816000018190555050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff166119ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119e69061220c565b60405180910390fd5b6119ff6119fa6112f6565b611437565b565b6000611a14611a0f846123a9565b612384565b905082815260208101848484011115611a2c57600080fd5b611a37848285612598565b509392505050565b600081359050611a4e8161290e565b92915050565b600081359050611a6381612925565b92915050565b600082601f830112611a7a57600080fd5b8135611a8a848260208601611a01565b91505092915050565b600060c08284031215611aa557600080fd5b611aaf60c0612384565b90506000611abf84828501611b44565b6000830152506020611ad384828501611b44565b6020830152506040611ae784828501611b44565b6040830152506060611afb84828501611b44565b6060830152506080611b0f84828501611b44565b60808301525060a0611b2384828501611b44565b60a08301525092915050565b600081359050611b3e8161293c565b92915050565b600081519050611b538161293c565b92915050565b600081359050611b6881612953565b92915050565b600060208284031215611b8057600080fd5b6000611b8e84828501611a3f565b91505092915050565b60008060008060008060c08789031215611bb057600080fd5b6000611bbe89828a01611a54565b9650506020611bcf89828a01611b2f565b9550506040611be089828a01611b2f565b9450506060611bf189828a01611b59565b9350506080611c0289828a01611a54565b92505060a0611c1389828a01611a54565b9150509295509295509295565b600060208284031215611c3257600080fd5b600082013567ffffffffffffffff811115611c4c57600080fd5b611c5884828501611a69565b91505092915050565b600060c08284031215611c7357600080fd5b6000611c8184828501611a93565b91505092915050565b600060208284031215611c9c57600080fd5b6000611caa84828501611b44565b91505092915050565b60008060408385031215611cc657600080fd5b6000611cd485828601611b44565b9250506020611ce585828601611b44565b9150509250929050565b600080600080600060a08688031215611d0757600080fd5b6000611d1588828901611b2f565b9550506020611d2688828901611b2f565b9450506040611d3788828901611b2f565b9350506060611d4888828901611b2f565b9250506080611d5988828901611b2f565b9150509295509295909350565b611d6f81612521565b82525050565b611d7e81612533565b82525050565b611d95611d9082612533565b61260b565b82525050565b6000611da6826123da565b611db081856123f0565b9350611dc08185602086016125a7565b80840191505092915050565b611dd581612574565b82525050565b611de481612586565b82525050565b6000611df5826123e5565b611dff81856123fb565b9350611e0f8185602086016125a7565b611e18816126a2565b840191505092915050565b6000611e30600c836123fb565b9150611e3b826126b3565b602082019050919050565b6000611e536026836123fb565b9150611e5e826126dc565b604082019050919050565b6000611e766014836123fb565b9150611e818261272b565b602082019050919050565b6000611e996028836123fb565b9150611ea482612754565b604082019050919050565b6000611ebc601f836123fb565b9150611ec7826127a3565b602082019050919050565b6000611edf6015836123fb565b9150611eea826127cc565b602082019050919050565b6000611f02602e836123fb565b9150611f0d826127f5565b604082019050919050565b6000611f25601b836123fb565b9150611f3082612844565b602082019050919050565b6000611f486020836123fb565b9150611f538261286d565b602082019050919050565b6000611f6b6019836123fb565b9150611f7682612896565b602082019050919050565b6000611f8e602b836123fb565b9150611f99826128bf565b604082019050919050565b611fad8161255d565b82525050565b611fbc81612567565b82525050565b6000611fce8285611d9b565b9150611fda8284611d84565b6020820191508190509392505050565b6000602082019050611fff6000830184611d66565b92915050565b600060408201905061201a6000830185611d66565b818103602083015261202c8184611dea565b90509392505050565b600060808201905061204a6000830187611d75565b6120576020830186611fb3565b6120646040830185611d75565b6120716060830184611d75565b95945050505050565b600060608201905061208f6000830186611dcc565b61209c6020830185611fa4565b6120a96040830184611fa4565b949350505050565b60006020820190506120c66000830184611ddb565b92915050565b600060208201905081810360008301526120e581611e23565b9050919050565b6000602082019050818103600083015261210581611e46565b9050919050565b6000602082019050818103600083015261212581611e69565b9050919050565b6000602082019050818103600083015261214581611e8c565b9050919050565b6000602082019050818103600083015261216581611eaf565b9050919050565b6000602082019050818103600083015261218581611ed2565b9050919050565b600060208201905081810360008301526121a581611ef5565b9050919050565b600060208201905081810360008301526121c581611f18565b9050919050565b600060208201905081810360008301526121e581611f3b565b9050919050565b6000602082019050818103600083015261220581611f5e565b9050919050565b6000602082019050818103600083015261222581611f81565b9050919050565b60006020820190506122416000830184611fa4565b92915050565b600060608201905061225c6000830186611fa4565b6122696020830185611d66565b6122766040830184611fa4565b949350505050565b60006080820190506122936000830187611fa4565b6122a06020830186611d66565b6122ad6040830185611fa4565b6122ba6060830184611fa4565b95945050505050565b60006040820190506122d86000830185611fa4565b6122e56020830184611fa4565b9392505050565b60006060820190506123016000830186611fa4565b61230e6020830185611fa4565b61231b6040830184611fa4565b949350505050565b600060c0820190506123386000830189611fa4565b6123456020830188611fa4565b6123526040830187611fa4565b61235f6060830186611fa4565b61236c6080830185611fa4565b61237960a0830184611fa4565b979650505050505050565b600061238e61239f565b905061239a82826125da565b919050565b6000604051905090565b600067ffffffffffffffff8211156123c4576123c3612673565b5b6123cd826126a2565b9050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006124178261255d565b91506124228361255d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561245757612456612615565b5b828201905092915050565b600061246d8261255d565b91506124788361255d565b92508261248857612487612644565b5b828204905092915050565b600061249e8261255d565b91506124a98361255d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156124e2576124e1612615565b5b828202905092915050565b60006124f88261255d565b91506125038361255d565b92508282101561251657612515612615565b5b828203905092915050565b600061252c8261253d565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061257f8261255d565b9050919050565b600061259182612567565b9050919050565b82818337600083830152505050565b60005b838110156125c55780820151818401526020810190506125aa565b838111156125d4576000848401525b50505050565b6125e3826126a2565b810181811067ffffffffffffffff8211171561260257612601612673565b5b80604052505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f77726f6e67207369676e65720000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f7061796c6f616420776173206d6f646966696564000000000000000000000000600082015250565b7f4e6f7420656e6f75676820737465707320617661696c61626c6520746f206d6f60008201527f7665207468657265000000000000000000000000000000000000000000000000602082015250565b7f4e6f7420656e6f756768742f746f6f206d7563682065746865722073656e7400600082015250565b7f796f7520616c7265616479207369676e65642075700000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f6c617374207175657269656420646f6573206e6f74206d617463680000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f796f75206e65656420746f206265207265676973746572656400000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b61291781612521565b811461292257600080fd5b50565b61292e81612533565b811461293957600080fd5b50565b6129458161255d565b811461295057600080fd5b50565b61295c81612567565b811461296757600080fd5b5056fea26469706673582212200eca451ee87adeb556978c4198e6c12611ff68221bac4b6c74f1abeb2c7ef6c264736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "moveShip(uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Move the ship to a new position {_planetId} the planet you want to reach {_shipId} the ship you are moving"
      },
      "registerProfile(string)": {
        "notice": "Creates the user profile of the user and mints a starship nft and forwards $$ to the treasury"
      },
      "setBackendAddress(address)": {
        "notice": "The address of our web2 backend. Messages from the backend which are verified in this contract"
      },
      "setNftAddress(address)": {
        "notice": "We set the Nft Contract"
      },
      "setWorldAddress(address)": {
        "notice": "We set the Worldcontract Contract"
      },
      "syncSteps(bytes32,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Sync the steps for the user"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/Players.sol:Players",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 133,
        "contract": "contracts/Players.sol:Players",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1808,
        "contract": "contracts/Players.sol:Players",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Players.sol:Players",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/Players.sol:Players",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3821,
        "contract": "contracts/Players.sol:Players",
        "label": "indexPlayerIds",
        "offset": 0,
        "slot": "101",
        "type": "t_struct(Counter)1815_storage"
      },
      {
        "astId": 3824,
        "contract": "contracts/Players.sol:Players",
        "label": "indexStartingPosition",
        "offset": 0,
        "slot": "102",
        "type": "t_struct(Counter)1815_storage"
      },
      {
        "astId": 3826,
        "contract": "contracts/Players.sol:Players",
        "label": "BACKEND",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 3828,
        "contract": "contracts/Players.sol:Players",
        "label": "NFT",
        "offset": 0,
        "slot": "104",
        "type": "t_address"
      },
      {
        "astId": 3830,
        "contract": "contracts/Players.sol:Players",
        "label": "WORLD",
        "offset": 0,
        "slot": "105",
        "type": "t_address"
      },
      {
        "astId": 3832,
        "contract": "contracts/Players.sol:Players",
        "label": "AAVE_VAULT",
        "offset": 0,
        "slot": "106",
        "type": "t_address"
      },
      {
        "astId": 3837,
        "contract": "contracts/Players.sol:Players",
        "label": "players",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_address,t_struct(PersonProfile)3818_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(PersonProfile)3818_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Players.PersonProfile)",
        "numberOfBytes": "32",
        "value": "t_struct(PersonProfile)3818_storage"
      },
      "t_struct(Counter)1815_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 1814,
            "contract": "contracts/Players.sol:Players",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PersonProfile)3818_storage": {
        "encoding": "inplace",
        "label": "struct Players.PersonProfile",
        "members": [
          {
            "astId": 3807,
            "contract": "contracts/Players.sol:Players",
            "label": "playerId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3809,
            "contract": "contracts/Players.sol:Players",
            "label": "timeJoined",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3811,
            "contract": "contracts/Players.sol:Players",
            "label": "lastQueried",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3813,
            "contract": "contracts/Players.sol:Players",
            "label": "stepsAvailable",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3815,
            "contract": "contracts/Players.sol:Players",
            "label": "totalStepsTaken",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3817,
            "contract": "contracts/Players.sol:Players",
            "label": "amountEarned",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}